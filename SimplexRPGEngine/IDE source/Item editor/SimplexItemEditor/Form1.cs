using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;

namespace SimplexItemEditor
{
    public partial class Form1 : Form
    {
        public string projectName = "";
        public List<GameObject> objects = new List<GameObject>();
        GameObject editedObject;

        public Form1()
        {
            InitializeComponent();
        }

        public void SetFormName(string name)
        {
            string str = name;
            int index = name.LastIndexOf('\\') + 1;
            str = str.Substring(index);

            this.Text = "Simplex Item designer v0.0PRE - " + str;
        }

        private void newProjectToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ToolStripItem node = sender as ToolStripItem;
            string text = node.Text;

            if (text == "New project")
            {
                saveFileDialog1.ShowDialog();
            }
        }

        private void saveFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            projectName = saveFileDialog1.FileName;
            SetFormName(projectName);
        }

        private void addItemToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ToolStripItem node = sender as ToolStripItem;
            string text = node.Text;

            if (text == "Add item")
            {
                string str = Microsoft.VisualBasic.Interaction.InputBox("Name of new item?", "", "Item");
                treeView1.BeginUpdate();
                treeView1.Nodes.Add(str);
                objects.Add(new GameObject(str));
                treeView1.EndUpdate();
            }
        }

        private void treeView1_Click(object sender, EventArgs e)
        {
  
        }

        public GameObject GetObjectFromName(string name)
        {
            GameObject toReturn = null;

            foreach (GameObject go in objects)
            {
                if (go.name == name)
                {
                    toReturn = go;
                    break;
                }
            }

            return toReturn;
        }

        private void treeView1_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            editedObject = GetObjectFromName(e.Node.Text);
          
            EditForm eForm = new EditForm(e.Node.Text, editedObject, this);
            eForm.Show();
        }

        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            saveFileDialog2.ShowDialog();
        }

        private void saveFileDialog2_FileOk(object sender, CancelEventArgs e)
        {
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.NewLineOnAttributes = true;

            XmlWriter writer = XmlWriter.Create(projectName + ".simplexItemEditor", settings);

            writer.WriteStartDocument();
            writer.WriteComment("Generated by Simplex Item editor");

            foreach(GameObject go in objects)
            {
                writer.WriteStartElement("Object");
                writer.WriteAttributeString("name", go.name);
                writer.WriteAttributeString("inGameName", go.inGameName);
                writer.WriteAttributeString("customCode", go.customCode);
                writer.WriteAttributeString("description", go.description);
                writer.WriteAttributeString("durability", go.durability);
                writer.WriteAttributeString("durabilityMax", go.durabilityMax);
                writer.WriteAttributeString("footer", go.footer);
                writer.WriteAttributeString("footerColor", go.footerColor.ToString());
                writer.WriteAttributeString("enumID", go.ID);
                writer.WriteAttributeString("idleImage", go.idleImagePath);
                writer.WriteAttributeString("isStackable", go.isStackable.ToString());
                writer.WriteAttributeString("materialIndex", go.materialIndex);
                writer.WriteAttributeString("pickImage", go.pickImagePath);
                writer.WriteAttributeString("wrapText", go.wraptext.ToString());
                writer.WriteEndElement();
            }

            writer.WriteEndDocument();
            writer.Close();
        }

        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openFileDialog1.ShowDialog();   
        }

        private void openFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            XmlReader reader = XmlReader.Create(openFileDialog1.FileName);
   
            while(reader.Read())
            {              
                if (reader.NodeType == XmlNodeType.Element)
                {
                    XElement xe = XNode.ReadFrom(reader) as XElement;
                    string name = xe.Attribute("name").Value;
                    GameObject go = new GameObject(name);

                    Image image = Image.FromFile(xe.Attribute("idleImage").Value);
                    go.idleImage = image;

                    objects.Add(go);
                    treeView1.Nodes.Add(name);
                }
            }
        }
    }
}
