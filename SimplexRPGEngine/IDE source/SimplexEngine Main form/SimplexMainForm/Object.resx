<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAA4
        CgAAAk1TRnQBSQFMAgEBAwEAARgBAAEYAQABEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEgBgABEC4AAWEBWgFYAcABgAFcAVEB/wFhAVoBWAHAbAADLQFJA6IB5wF5AnEB/wF8
        AnMB/wHhAt8B/gFpAmgB2QMdASsDBAEFAwEBAmQAAYABXAFRAf8BgAFcAVEB/wGAAVwBUQH/KAACLQEs
        AUQBSAFHAUMBeAE1ATQBMwFTNAADJwE+AYgCggH/AeIC3wH/AZYBjwGOAf8BkwGMAYsB/wG2AbMBsgH/
        AakCowH/AWMCWQH/AxgBIgMNARIDBAEFUAADLAFDDAABYgGXAaIB/wFiAZcBogH/AWIBlwGiAf8MAAMk
        ATYMAAFLAUoBRQF+AawBjwE2Af8BrQGQATcB/wGtAZABNwH/Aa0BkAE3Af8BrQGQATcB/wGsAZABNwH/
        AjcBNgFYKAADAgEDAUgCRgGoASkBJwEmAf8BTAFGAUUB/wFeAVcBVQH/AWUBXQFcAf8BZQFdAVwB/wFF
        AUABPwH/ASMBIAEfAf8DQAGFAx8BLgMNAREDAQECTAABRwJJAYALAAEBAUYBzgHvAf8BRgHOAe8B/wFG
        Ac4B7wH/CAADMgFQAUcCSQGACAADHAEoAXgBbQFOAcABrAGPATgB/wGtAZABNwH/Aa0BkAE3Af8BrQGQ
        ATcB/wGtAZABNwH/Aa0BkAE3Af8BrAGPATcB/ygAAwIBAwI/AT4BrwEiAiAB/wEzAS8BLgH/AXYBbgFt
        Af8BfAFzAXIB/wFSAU0BTAH/ASwBKgEpAf8BOAE2ATUB/QM6AaEDIAExAw4BEwMBAQJUAAFVAW8BdAHA
        AUYBzgHvAf8BRgHOAe8B/wFGAc4B7wH/AUYBzgHvAf8BRgHOAe8B/wFUAWkBbwG8HAABrAGPATYB/wGt
        AZABNwH/Aa0BkAE3Af8BrQGQATcB/wGtAZABNwH/Aa0BkAE3Af8DEgEZJwABAQM7AYACXQFcAcABbAJp
        Ad4BlgKKAf8BYwFgAV8B3wE9AjwBnwI8ATsBnAE8AjsBmQM9AaADDwEVAwUBB1QAAUYBzgHvAf8BRgHO
        Ae8B/wFGAc4B7wH/AUYBzgHvAf8BRgHOAe8B/wFGAc4B7wH/AUYBzgHvAf8BRgHOAe8B/wFYAXwBhQHY
        GAABMQIwAUwBrQGQATcB/wGtAZABNwH/Aa0BkAE3Af8BrQGQATcB/wGtAZABNwH/LAABPAE7AToBzAG1
        ArEB+gFUAlIBqwFYAlQBxAGSAokB8QM5AXkCOQE4AXUDNwFtAzsBgAMCAQNUAAMiATIBRgHOAe8B/wFG
        Ac4B7wH/AUYBzgHvAf8BRgHOAe8B/wFGAc4B7wH/AUYBzgHvAf8BRgHOAe8B/wFGAc4B7wH/AUYBzgHv
        Af8DCwEPGAABowGPATcB+wGtAZABNwH/Aa0BkAE3Af8BrQGQATcB/wGHAXkBSAHZAVYBUwFKAZIBSgFJ
        AUQBfCQAAToBOQE4Ae4DRAGjAjsBOgF6AYECeQH0AVgCVAHRAj4BPAG+Aj4BPAGtAjwBOwGIAz0BjVgA
        AUcCSQGAAUYBzgHvAf8BRgHOAe8B/wFGAc4B7wH/AUYBzgHvAf8BRgHOAe8B/wFGAc4B7wH/AUYBzgHv
        Af8BRgHOAe8B/wFGAc4B7wH/AzoBYhwAAW4BZgFOAbcBogGKATsB+AFAAT8BPQFpAiUBJAE2Aa0BkAE3
        Af8BrQGQATcB/wMmATkcAAMhATABQwJCAa4DVwGzAYYCfwH+AUYCRQGaAz0BiQM8AYgCPgE9AZECPgE9
        AZcCPwE+AaIDBAEFTAABRQFHAUgBfQNCAXMBRgJIAX8BRgHOAe8B/wFyAdoB8wH/AUYBzgHvAf8BRgHO
        Ae8B/wFGAc4B7wH/AUYBzgHvAf8BRgHOAe8B/wFGAc4B7wH/AUYBzgHvAf8DOgFgAUYCSAF/AUICQwF0
        HAADDQERAawBkQE2Af8BrQGQATcB/wGtAZABNwH/AawBjwE3Af8DBwEKGAADMQFTAzsBewHGAsIB9QGM
        AoIB/wM+AakDNwFqAy8BTwE/Aj4BlAM9AaEDPAGRAywBRVQAAyIBMQFGAc4B7wH/AXEB2gHzAf8BRgHO
        Ae8B/wFGAc4B7wH/AUYBzgHvAf8BRgHOAe8B/wFGAc4B7wH/AUYBzgHvAf8BRgHOAe8B/zAAAYQBdQFN
        AdYBrQGQATcB/wGtAZABNwH/AawBkAE2Af8YAAI9ATwBgwM3AWsCTAFLAZ0BQAI/AbIDPgGkAzoBeQI5
        ATgBdAE+Aj0BkwI/AT4BuQI+ATwBvwM9AXpYAAFQAVsBXQGoAVwB1AHxAf8BdAHbAfMB/wFZAdMB8QH/
        AUYBzgHvAf8BRgHOAe8B/wFGAc4B7wH/AUYBzgHvAf8BRwJJAYE0AAFBAUABPQFqAa0BkAE3Af8BrQGQ
        ATcB/wGsAY4BOAH/FAADOwGAAzkBcgI8ATsBjAM9AY0DNQFjAz4BrwI+AT0BsgM3AWgDOwF/Az4BpAM+
        AaNcAAFWAYUBkQHdAUYBzgHvAf8BcgHaAfMB/wGhAeYB9wH/AUYBzgHvAf8BRgHOAe8B/wFPAVUBVgGb
        PAADCQEMAa0BjwE3Af8BrQGQATcB/wGKAXUBSwHdEAADPAGKAj4BPAGrAj4BPAG9Az4BiQMzAV0DPwGX
        AkABPwGgAy4BTgM7AXgDPgGgAj8BPgGhVAABQQJCAXIDBAQGAQgBRwJJAYABSwFPAVEBkAFVAWQBaQG7
        AUsBTwFQAY4BRwJJAYAEAAI9AT4BaQMvAUk8AAGMAXkBSwHgAa0BkAE3Af8BYAFbAUwBogwAAVkCVgHZ
        AdECxgH/AesC6AH6AbMCrAHuAa0CpAHuAa8CpgHyAcEBwAG/AfMBywLEAfQBywLCAf8BaAJfAf8BUwJQ
        AdzAAAFHAUYBQgF2Aa4BkQE2Af8IAAMaASEBlQGTAZIB2wE/Aj4BhwE2AjUBYQM5AXQDPQGPAjwBOwGI
        AjsBOgGCAT0CPAGPA0cBqQFUAVIBUQG0AWUCYQHlaAABRgHOAe8B/3AAASoCKQE0A1IBXgNXAWUDTQFf
        AUMCQgFTAy4BOgMMAQ9wAAFZAW0BcwHKdwABAWQAAUIBTQE+BwABPgMAASgDAAFAAwABEAMAAQEBAAEB
        BQABgBcAA/8BAAH+AT8C/wH4AQMCAAH+AT8B8QH/AfABAQIAAe4BOwGAAX8B4AMAAewBMwEAAX8B4AMA
        AfgBDwHgAT8B4AEBAgAB8AEHAeABfwHwAQMCAAHgAQMB8AEfAfABBwIAAeABAwH4AQ8B4AEDAgABgAEA
        Af4BBwHgAQMCAAHgAQcB/wGHAeABAwIAAfABBwH/AcMB4AEDAgAB+AEPAf8B4QHgAQMCAAHgARMB/wH4
        AeABAwIAA/8B/AHAAQMCAAH/AX8C/wH4AQ8CAAH/AX8C/wH9Af8CAAs=
</value>
  </data>
</root>