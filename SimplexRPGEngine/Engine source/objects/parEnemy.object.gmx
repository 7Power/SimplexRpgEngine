<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ini variables

event_inherited();
slowdown                      = 0;
tar_x                         = x+23;
tar_y                         = y;
spd                           = 1;
mood                          = "idle"
can_damage                    = -1;
drop                          = 1;
spr[0]                        = sprite_index;
spr[1]                        = image_index;
zspeed                        = 0;
z                             = 0;
z_mood                        = 0;
bonus_damage                  = 0;
p                             = 0;
in_fight                      = 0;
image_speed                   = 0;
dir                           = choose(dir_left,dir_right,dir_up,dir_down);
count                         = 0;
health_alpha                  = 0;
scale                         = 1;              
level                         = 1;
hp                            = 10;
last_hp                       = hp;
colour_to_find                = shader_get_uniform(shdLerp, "f_Colour1");
lerp_value                    = 0;
force_aggresive               = 0;
force_timer                   = 400;
timeToPerform                 = 0;
tempSpd                       = spd;
safeDying                     = true;
cced                          = false;
maxHp                         = hp;
bloodColor                    = c_red;
staggerTimer                  = 0;
notForced                     = true;
finalSlowdown                 = 0;
moveLenght                    = 32;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Basic collision

if (forcedX &gt; 1 || forcedY &gt; 1)
    {    
     forcedX = 0;
     forcedY = 0;
     
     hp -= 100;
     scrGoreMed(x - 10, y - 10, 25, false);
    }

scrEnemyCollision(self);
scrEnemyGetPosition();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayerCombat">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get damage and handle it

scrEnemyGetDamage();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self

notForced     = false;
finalSlowdown = (1 - slowdown);
if (forcedX &lt; 1 &amp;&amp; forcedY &lt; 1) {notForced = true; forcedX = 0; forcedY = 0; forcedHelper = 0;}

if (followMouse)
    {
     x = mouse_x;
     y = mouse_y;
    }

if (x &gt; room_width - 32 || y &gt; room_height - 32 || x &lt; 32 || y &lt; 32)
   {
   instance_set_position(xprevious, yprevious);
   state = "turn";
   scrEnemyGetPosition();
   mood = "idle";
   }  
   
// Cutscenes
if (timeline_running &amp;&amp; (timeline_position &gt; (timeline_max_moment(timeline_index) + global.cutsceneTime)))
    {
     timeline_running = false
     spd = tempSpd;
     timeline_position = 0;
    }
if (timeline_running)
    {
     draw_text(x, y - 32, "Performing cutscene");
    }

if (mood == "cutscene" &amp;&amp; distance_to_point(cutsceneX, cutsceneY) &gt; 0)
{
if (dir = dir_right) {x += spd*(1-slowdown);}
if (dir = dir_left) {x -= spd*(1-slowdown);}
if (dir = dir_up) {y -= spd*(1-slowdown);}
if (dir = dir_down) {y += spd*(1-slowdown);}

}
else if (mood == "cutscene" &amp;&amp; distance_to_point(cutsceneX, cutsceneY) == 0)
    {
     mood = "idle";
    }    

// Manage HP and status
if (can_damage &gt; 0) {can_damage--;} else {can_damage = -1;}
last_hp = lerp(last_hp, hp, 0.1);

if (last_hp &lt;= 0.05) {if (mood != "dying") {event_user(0);} mood = "dying";}

if (mood == "dying")
{
if (safeDying) {safeDying = false; scrGoreExplodeDropShards(32, 8, spr[0]);}
draw_sprite_ext(spr[0],spr[1],x,y,1,1,0,c_white,image_alpha);
if (image_alpha &gt; 0) {image_alpha -= 0.02;} else {instance_destroy();}   
}

if (cced)
    {
     speed = lerp(speed, 0, 0.05);
     image_angle = direction;
     if (speed &lt; 0.1) {speed = 0; cced = false; direction = 0; image_angle = 0;}
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
