<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBunny</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ini

event_inherited();
scrEnemyIni(1,5,1,choose(1,1,2),"Slime",bestiaryEnemySlime,scrColorflag(c_blue) + "Slime" + scrEndColorflag());

mood = "";
image_speed = 0;
dir         = "s";
image_index = 8;
spottedPlayer = false;

x2 = 0;
y2 = 0;
x3 = 0;
y3 = 0;
fovRange = 128;

//event_user(0);

life = 2;
mySpeed = 2;       
docile = true;

myLife = life;
paces = 0;
canMove = true;
horiSpeed = 0;
vertSpeed = 0;
state = "idle";
idleTimer = 1*room_speed;
face = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Loot

if (drop)
{
scrEnemyLoot(oGold2, 1, 2, true, 50, 3);
scrEnemyLoot(oFurRabbit, 1, 1, true, 30, 1);
scrEnemyLoot(oBone, 1, 1, true, 30, 2);
scrEnemyDie(false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Compute next path

mp_grid_destroy(grid);
path_delete(path);

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = floor(x);
y = floor(y);

event_inherited();
if (sprite_index != noone) {draw_self();}
if (hp &lt;= 0) {image_alpha = 0;}
/*
// Draw FOV
if (dir == "d") {x2 = x + fovRange; y2 = y + fovRange; x3 = x + fovRange; y3 = y - fovRange;}
if (dir == "s") {x2 = x - fovRange; y2 = y + fovRange; x3 = x + fovRange; y3 = y + fovRange;}

draw_triangle(x, y, x2, y2, x3, y3, true);
draw_circle(x, y, 64, true);

draw_circle(tarX, tarY, 8, false);
//mp_grid_draw(grid);

if (x == xprevious &amp;&amp; y == yprevious)
    {
     mp_grid_destroy(grid);
     path_delete(path);
     event_user(0);
    }    
*/
if (canMove) {scrSimpleAiStep(horiSpeed, vertSpeed, parSolid);}

if (canMove)
{
switch (state)
    {
    case ("idle"):
        idleTimer--;
        if (idleTimer &lt;= 0)
            state = "turn";
        break;
        
    case ("turn"):
        if (irandom(1))
            horiSpeed = choose(-3, 3);
        else
            vertSpeed = choose(-3, 3);
        paces = irandom_range(25, 50);
        state = "move"; 
        break;
        
    case ("move"):
        paces--;
        if (x == xprevious)
        &amp;&amp; (y == yprevious)
        || (paces &lt;= 0)
            state = "stop";
        break;
        
    case ("stop"):
        horiSpeed = 0;
        vertSpeed = 0;
        state = "idle";
        idleTimer = 1*room_speed;
        break;
        
    case ("stagger"):
        staggerTimer--;
        image_blend = merge_color(c_white, c_red, lengthdir_x(1, staggerTimer*15));
        if (staggerTimer &lt;= 0)
            {
            image_blend = c_white;
            state = "idle";
            beenHit = false;
            if (myLife &lt;= 0)
                hide = true;
            }
            
        // Do stagger
        switch (face)
            {
            case (0): vertSpeed = staggerTimer/5; break;
            case (1): vertSpeed = staggerTimer/5; break;
            case (2):  horiSpeed = staggerTimer/5; break;
            case (3):  horiSpeed = staggerTimer/5; break;
            }
        break;
    }

// Sprite and animation management
if (vertSpeed &lt; 0) face = 0;
if (vertSpeed &gt; 0) face = 1;
if (horiSpeed &gt; 0) face = 2;
if (horiSpeed &lt; 0) face = 3;
//SetSpriteFromFace(sprChickenWalkNorth, sprChickenWalkSouth, sprChickenWalkEast, sprChickenWalkWest);

    // Adjust animation phase cycle       
    if (face == 0) {if (image_index &lt; 12  || image_index &gt; 15)  {image_index = 12;}}
    if (face == 1) {if (image_index &lt; 0 || image_index &gt; 3.9) {image_index = 0;}}    
    if (face == 2) {if (image_index &lt; 9  || image_index &gt; 11.9) {image_index = 9;}}    
    if (face == 3) {if (image_index &lt; 4 || image_index &gt; 7.9) {image_index = 4;}} 

if (x != xprevious)
|| (y != yprevious)
    image_speed = 0.15;
else
    image_index = 0;   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
