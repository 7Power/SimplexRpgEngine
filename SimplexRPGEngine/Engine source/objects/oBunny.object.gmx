<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBunny</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ini

event_inherited();

image_speed = 0;
dir         = "s";
image_index = 8;
spottedPlayer = false;

x2 = 0;
y2 = 0;
x3 = 0;
y3 = 0;
fovRange = 128;

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Choose target point

do
{
tarX = x + (irandom(3) * 32) - (irandom(3) * 32);
tarY = y + (irandom(3) * 32) - (irandom(3) * 32);
}
until(place_free(tarX, tarY) &amp;&amp; distance_to_point(tarX, tarY) &gt;= 32);


grid = mp_grid_create(x - 128, y - 128, (256 / 32), (256 / 32), 32, 32);
mp_grid_add_instances(grid, oAdvancedCollision, false);

path = path_add();
mp_grid_path(grid, path, x, y, tarX, tarY, false);

// Snap path
for (var i = 0; i &lt; path_get_number(path); i++)
    {
    var px = (path_get_point_x(path, i) div 32) * 32;
    var py = (path_get_point_y(path, i) div 32) * 32;
    path_change_point(path, i, px, py, 50);
    }
    
path_start(path, 2, path_action_stop, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Compute next path

mp_grid_destroy(grid);
path_delete(path);

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

// Draw FOV
if (dir == "d") {x2 = x + fovRange; y2 = y + fovRange; x3 = x + fovRange; y3 = y - fovRange;}
if (dir == "s") {x2 = x - fovRange; y2 = y + fovRange; x3 = x + fovRange; y3 = y + fovRange;}

draw_triangle(x, y, x2, y2, x3, y3, true);
draw_circle(x, y, 64, true);

draw_circle(tarX, tarY, 8, false);
mp_grid_draw(grid);

if (x == xprevious &amp;&amp; y == yprevious)
    {
     mp_grid_destroy(grid);
     path_delete(path);
     event_user(0);
    }    
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
