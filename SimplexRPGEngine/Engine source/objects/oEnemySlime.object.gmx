<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEnemySlime</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>parEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise enemy

event_inherited();
scrEnemyIni(30, 5, 1, choose(1, 1, 2), "Slime", bestiaryEnemySlime, scrColorflag(c_blue) + "Slime" + scrEndColorflag(), "animal", c_aqua);

scrAdvancedAiIni();
scrAdvancedAiRegisterAction("idle", aiActionEnum.actionBasic);
scrAdvancedAiRegisterAction("attack", aiActionEnum.actionBasic);
scrAdvancedAiRegisterAction("jump", aiActionEnum.actionAbility, 10);
scrAdvancedAiRegisterAction("slime", aiActionEnum.actionAbility, 10, -1, 2);
scrAdvancedAiRegisterAction("heal", aiActionEnum.actionAbility, 10, -1, 3);



 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide

if (other.id != oPlayer.id)
{
event_inherited();

if (mood == "jump") {randomize(); bonus_damage = 10; repeat(5) {instance_create(x-random(10)+random(10),y+random(10)-random(10),oBlob);}}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage player

// Fixed order: Collide -&gt; Apply affect(s) -&gt; Deal damage
scrEnemyCollision(other);
if (scrEnemyApplyAffect("poison", secToSteps(2), 0, c_red, 1, 20, true, 0, true))
    {
    stateAddEntry(coloredName + "tě otrávil!");
    }
scrEnemyDamage(oPlayer,15, coloredName + " ti způsobil [flagDamage] [flagPoints] poškození.");



if (mood == "jump")
   { 
    if (dir == dir_up) {dir = dir_down; y-= 4;}
    else if (dir == dir_down) {dir = dir_up; y += 4;}
    else if (dir == dir_right) {dir = dir_left; x -= 4;}
    else if (dir == dir_left) {dir = dir_right; x += 4;}
    mood = "jump";
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Implementation of AI modes

isCasting = false;

// Idle AI
if (mood == "idle")
   {
    image_speed = 0.1;
    if (force_aggresive) {if (mood = "idle") {mood = "attack"; in_fight = 1;} if (force_timer &gt; 0) {force_timer--;} else {force_aggresive = 0; force_timer = 400;}}

    if (dir == dir_right) {x += spd * finalSlowdown;}
    if (dir == dir_left)  {x -= spd * finalSlowdown;}
    if (dir == dir_up)    {y -= spd * finalSlowdown;}
    if (dir == dir_down)  {y += spd * finalSlowdown;}
    
    count += spd * finalSlowdown; 
    if (count &gt;= moveLenght) {count = 0; event_user(2); scrEnemyGetPosition();}
   }

// Attack AI  
if (mood == "attack")
   {
    image_speed = 0.15;
    in_fight    = true;
    px = oPlayer.x;
    py = oPlayer.y;

    if (can_damage == -1)
       {
        if (dir == dir_right) {x += spd * finalSlowdown;}
        if (dir == dir_left)  {x -= spd * finalSlowdown;}
        if (dir == dir_up)    {y -= spd * finalSlowdown;}
        if (dir == dir_down)  {y += spd * finalSlowdown;}          
        if (can_damage == -1) {count += spd * finalSlowdown + 0.2;} 
       }
    if (count &gt;= moveLenght) {count = 0; event_user(2); scrEnemyGetPositionAttack();}
   }
   
// Jump AI
if (mood == "jump")
     {
      image_speed = 0;
      isCasting = true;
         
      if (dir == dir_up)
         {
          if (z_mood == 0) {y -= z; z += 0.1; image_alpha -= 0.01 if (z &gt; 3) {z_mood = 1;}}
          if (z_mood == 1) {y -= z; z -= 0.1; image_alpha += 0.01 if (z &lt;= 0) {randomize(); z_mood = 2; repeat(5) {instance_create(x-random(10)+random(10),y+random(10)-random(10),oBlob);} mood = "idle";}}

          if (z_mood == 0 &amp;&amp; z &gt; 0)
             {
              clr(-1, z / 3);
              draw_sprite(sJump,0,x,y+z*4);
              clr(-1);
             }
             
          if (z_mood == 1)
             {
              clr(-1, abs(3 - z) - 0.2);
              draw_sprite(sJump, 0, x, y + (z * 8));
              clr(-1);
             }   
         }               
else if (dir == dir_down)
     {
      if (z_mood == 0) {y += z; z += 0.1; image_alpha -= 0.01 if (z &gt; 3) {z_mood = 1;}}
      if (z_mood == 1) {y += z; z -= 0.1; image_alpha += 0.01 if (z &lt;= 0) {randomize(); z_mood = 2; repeat(5) {instance_create(x-random(10)+random(10),y+random(10)-random(10),oBlob);} mood = "idle";}}

      if (z_mood == 0)
         {
          clr(-1, z / 3);
          draw_sprite(sJump,0,x,y+z*8);
          clr(-1);
         }
         
     if (z_mood == 1)
        {
         draw_set_alpha(z-2);
         draw_sprite(sJump,0,x,y+z*8);
         draw_set_alpha(1);
        }
    }
else if (dir == dir_right)
     {
      if (z_mood == 0) {x += z; z += 0.1; image_alpha -= 0.01 if (z &gt; 3) {z_mood = 1;}}
      if (z_mood == 1) {x += z; z -= 0.1; image_alpha += 0.01 if (z &lt;= 0) {randomize(); z_mood = 2; repeat(5) {instance_create(x-random(10)+random(10),y+random(10)-random(10),oBlob);} mood = "idle";}}

      if (z_mood == 0)
         {
          draw_set_alpha(z/3);
          draw_sprite(sJump,0,x,y+z*(8-z));
          draw_set_alpha(1);
         }
         
      if (z_mood == 1)
         {
          draw_set_alpha(z-2);
          draw_sprite(sJump,0,x,y+z*(8-z));
          draw_set_alpha(1);
         }
     }
else if (dir == dir_left)
     {
      if (z_mood == 0) {x -= z; z += 0.1; image_alpha -= 0.01 if (z &gt; 3) {z_mood = 1;}}
      if (z_mood == 1) {x -= z; z -= 0.1; image_alpha += 0.01 if (z &lt;= 0) {randomize(); z_mood = 2; repeat(5) {instance_create(x-random(10)+random(10),y+random(10)-random(10),oBlob);} mood = "idle";}}

      if (z_mood == 0)
         {
          draw_set_alpha(z/3);
          draw_sprite(sJump,0,x,y+z*8);
          draw_set_alpha(1);
         }
         
      if (z_mood == 1)
         {
          draw_set_alpha(z-2);
          draw_sprite(sJump,0,x,y+z*8);
          draw_set_alpha(1);
         }
     }
}

// Shoot AI
if (mood == "slime")
   {
    isCasting = true;
    image_speed = 0;            
    shader_set(shdLerp);            

    var s = sind(lerp_value);
    lerp_value += 5;
    
    if (lerp_value&gt;180) 
        {            
         lerp_value = 0;
        
         for (var i = 0; i &lt; 360; i += 90)        
              {
               inst = instance_create(x,y,oSlimePart);
               inst.direction = i;
              }
         mood = "idle";
        }
        
    shader_set_uniform_f(colour_to_find, 1, 1, 1, s);       
    draw_self();        
    shader_reset();
   } 

// Heal AI     
if (mood == "heal")
   {
    isCasting = true;
    image_speed = 0;             
    shader_set(shdLerp);  
              
    var s = sind(lerp_value);
    lerp_value += 5;
    
    if (lerp_value &gt; 180) 
        {            
         lerp_value=0;
         hp += irandom_range(3, 5);
         scrBasicEffect();
         mood = "idle";
        }
    shader_set_uniform_f(colour_to_find, 0, 1, 0, s);       
    draw_self()      
    shader_reset();      
   }     
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Special effects

if (slowdown &lt; 0.5)
{
randomize();

// jump
for (var i = 0; i &lt; tempIndex; i++)
    {
     var array = scrAdvancedAiGetAction(i);
     
    
    }
if (random(100) &gt; 80)
   {
    var array = scrAdvancedAiGetAction("jump");
    if (scrAdvancedAiCanPlayAction(scrAdvancedAiGetAction("jump"))) {mood = "jump";}
   }
else if (random(100) &gt; 80 &amp;&amp; mood == "attack")
   {
     mood = "slime";
   }
else if (random(100) &gt; 90 &amp;&amp; hp &lt; max_hp)
   {
     mood = "heal";
   }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Loot

if (drop)
{
scrEnemyLoot(oHealthDrop, 1,  5,  true, 40, 2);
scrEnemyLoot(oXpDrop,     10, 12, true, 70, 2);
scrEnemyLoot(oManaDrop,   5,  15, true, 50, 1);
scrEnemyLoot(oArmorDrop,  2,  4,  true, 50, 1);
scrEnemyLoot(oGold2,      1,  4,  true, 30, 4);
scrEnemyLoot(oGem1,       1,  1,  true, 10, 2);
scrEnemyLoot(oGem2,       1,  1,  true, 10, 2);
scrEnemyLoot(oGem3,       1,  1,  true, 10, 2);
scrEnemyLoot(oGem4,       1,  1,  true, 10, 2);
scrEnemyLoot(oGem5,       1,  1,  true, 10, 2);
scrEnemyDie(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self

event_inherited();

if (z_mood == 2) 
{
 zspeed       = 0;
 z            = 0;
 z_mood       = 0;
 bonus_damage = 0;
}
 

if (notForced)
   {    
    if (can_move)
       {
        image_speed = 0;

        if (isHunter &amp;&amp; mood != "dying") {mood = "attack";}
           
        // Step logic based on the current mode
        event_user(3);
          


    // Switch between idle &amp;&amp; attack mode
    if (!isDying)
       {
        if (instance_number(oPlayer) &gt; 0)
           {
            var d = distance_to_object(oPlayer);
            
            if (d &lt; 64 &amp;&amp; mood = "idle") {mood = "attack";}
            if (d &gt; 196 &amp;&amp; mood != "idle" &amp;&amp; !force_aggresive) {in_fight = 0; mood = "idle";}
           }
   
       if (in_fight || hp &lt; maxHp) {health_alpha = lin(health_alpha, 1, 0.05);}
       else {health_alpha = lin(health_alpha, 0, -0.05);} 
  
       if (health_alpha &gt; 0) 
          {
           fnt(fntPixelSmall);
   
           if (scale &gt; 1) {scale -= 0.02;}
           draw_sprite_general(sHealthBar,1,0,0,40,8,x-18,y-20,1,1,0,c_white,c_white,c_white,c_white,health_alpha);
           draw_sprite_part_ext(sHealthBar,0,0,0,((last_hp/max_hp)*40),8,x-18,y-20,1,1,c_white,health_alpha);
   
           alg("center");
           draw_text_colour(x,y-30,name,c_black,c_black,c_black,c_black,health_alpha);
           alg();
         }
     }   

    // Draw base sprite
    if (!isDying &amp;&amp; mood != "slime") 
       {
        if (p &lt; 10) {p += 0.2;} else {p = 0;}
  
        draw_self(); 
        draw_sprite_ext(sXpPoint,p,x,y,1,1,0,c_aqua,0.6);
       }

 
  }
  else
      {
       sprite_index = sEnemySlime;
       if (hp &lt;= 0) {image_alpha = 0;}
       draw_self();
      }
  }
  else
      {
       sprite_index = sEnemySlime;
       if (hp &lt;= 0) {image_alpha = 0;}
       draw_self();
       if (forcedX &gt; 0) {forcedHelp = lerp(forcedHelp, forcedBaseX, 0.01); x += forcedHelp; forcedX -= forcedHelp; }
       motion_blur(max(forcedBaseX - forcedX, 50), 180);
      }

if (dir == dir_right) {image_index = clamp(image_index, 3, 5.9);  if (image_index == 5.9)  {image_index = 3;}}
if (dir == dir_left)  {image_index = clamp(image_index, 0, 2.9);  if (image_index == 2.9)  {image_index = 0;}}
if (dir == dir_up)    {image_index = clamp(image_index, 6, 8.9);  if (image_index == 8.9)  {image_index = 6;}}
if (dir == dir_down)  {image_index = clamp(image_index, 9, 11.9); if (image_index == 11.9) {image_index = 9;}}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
