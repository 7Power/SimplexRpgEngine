<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCamera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up

angle         = 0;
motion        = 1;
spd           = 4;
koe           = 10;
target        = 0;
view          = 0;
debug         = 0;
freeCamera    = false;
lockedPosX    = -1;
lockedPosY    = -1;
selectedTool  = 0;
subtool       = 0;
flashOnTarget = false;
backTarget    = -1;
updateTarget  = false;
unPlayer      = false;
playerQuote   = "";

tool[0] = "camera";
tool[1] = "cutsceneMaker";
tool[2] = "propertiesEditor";

toolText[0] = "Plovoucí kamera";
toolText[1] = "Tvorba cutscén";
toolText[2] = "Úprava vlastností";

subtoolText[0, 0] = "";
subtoolText[1, 0] = "Tvorba cesty";
subtoolText[1, 1] = "Nastavení rychlosti";
subtoolText[2, 0] = "Úprava hodnoty";

alarm[0] = 1;

listX     = ds_list_create();
listY     = ds_list_create();
listSpeed = ds_list_create();

screenShake     = 0;
screenShakeFade = 0;

if (instance_number(oPlayer) &gt; 0) {target = oPlayer;}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free memory

ds_list_destroy(listX);
ds_list_destroy(listY);
ds_list_destroy(listSpeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump to player position

if (instance_number(oPlayer) &gt; 0)
   {
    x = oPlayer.x;
    y = oPlayer.y;
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flow if motion is enabled, else call jump

if (updateTarget)
   {
    updateTarget = false;
    target = backTarget;
    unPlayer = true;
   }

if (!debug)
{
scrScreenShakeUpdate();
   
if (motion == 1)
   {       
    if (instance_number(target) &gt; 0)
       {
       spd = ((distance_to_object(target)/koe));
       if (spd &lt; 0) {spd = 0;}
       
       if (distance_to_point(target.x,target.y) &gt; 2)
        {
         move_towards_point(target.x+lengthdir_x(32,direction),target.y+lengthdir_y(32,direction),spd);
        }
        else {speed = 0;}
       if (flashOnTarget || unPlayer) {if (distance_to_object(target) &lt; 16) {if (flashOnTarget) {scrScreenBlink(c_red); flashOnTarget = false;} if (unPlayer) {target.can_move2 = true; unPlayer = false; if (playerQuote != "") {apiPlayerSay(playerQuote); playerQuote = "";}}}}
       }

   }
if (abs(view) &gt;=360) {view = 0;}   
view_angle[0] = view;
}
else
{
    if (lockedPosX == -1)
    {   
    if (!freeCamera)
    {
    if (instance_number(target) &gt; 0)
       {
       spd = ((distance_to_object(target)/koe));
       if (spd &lt; 0) {spd = 0;}
       
       if (distance_to_point(target.x,target.y) &gt; 2)
        {
         move_towards_point(target.x+lengthdir_x(32,direction),target.y+lengthdir_y(32,direction),spd);
        }
        else {speed = 0;}
       }
   }
   else
    {
       spd = ((distance_to_point(mouse_x, mouse_y)/koe));
       if (spd &lt; 0) {spd = 0;}
       
       if (distance_to_point(mouse_x,mouse_y) &gt; 2)
       {
        move_towards_point(mouse_x+lengthdir_x(32,direction),mouse_y+lengthdir_y(32,direction),spd);
       }
       else {speed = 0;}
    }
   }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw in-game editor

if (keyboard_check_pressed(ord("H")))
    {
     debug = !debug;
     
     if (!debug) 
        {
        target = oPlayer;
        
        if (ds_list_size(listX) &gt; 0)
        {
        head = get_string("Název cutscény", "Cutscene");
        file = file_text_open_write("cutscene.simplexcs");
        file_text_write_string(file, "[TITLE]" + head);  
        file_text_writeln(file);     
        
        for (i = 0; i &lt; ds_list_size(listX); i++)
            {
             file_text_write_string(file, "CP:" + string(listX[| i ]) + "," + string(listY[| i ]) + "," + string(listSpeed[| i ]));  
             file_text_writeln(file);           
            }
        file_text_close(file);
        }
        }
    }
if (debug)
    {
    if (mouse_wheel_up()) {if (selectedTool &lt; array_length_1d(tool) - 1) {selectedTool++;}}
    if (mouse_wheel_down()) {if (selectedTool &gt; 0) {selectedTool--;}}    
    clr(c_black, 0.4);
    
    // Debug grid
    xx = 0;
    yy = 0;
    X = view_xview div 32 * 32;
    Y = view_yview div 32 * 32;
    
    for (i = 0; i &lt; (600 / 32); i++)
        {
         for(j = 0; j &lt; (800 / 32); j++)
            {
             xx += 32;
             draw_set_alpha(0.2);
             draw_line(X, Y + yy, X + 832, Y + yy); 
             draw_line(X + xx, Y, X + xx, Y + 632);            
             
             if (mouse_in(X + xx, X + xx + 32, Y + yy, Y + yy + 32))
                {
                 draw_rectangle_colour(X + xx, Y + yy, X + xx + 32, Y + yy + 32, c_yellow, c_yellow, c_yellow, c_yellow, false);
                }
             draw_set_alpha(1);
            }
         xx = 0;
         yy += 32;
        }
        
    clr(c_blue, 0.2);
    for (i = 0; i &lt; ds_list_size(listX); i++)
        {
         posX = listX[| i];
         posY = listY[| i];
         
         clr(c_blue, 0.2);
         draw_rectangle_colour(posX, posY, posX + 32, posY + 32, c_blue, c_blue, c_blue, c_blue, false);   
         alg("center");
         clr(c_black, 0.8);
         fnt();
         draw_text(posX + 16, posY + 16, string(i));
         fnt(fntPixelTiny);   
         draw_text(posX + 16, posY + 24, string(listSpeed[| i]));
         alg();  
        }
    
    clr();
    fnt();    
    draw_text(view_xview, view_yview, "Debug mode!" + "#Nástroj: " + toolText[selectedTool] + "#Free camera: " + string(freeCamera) + "#Camera locked on instance: " + string(target));
    draw_text(mouse_x + 16, mouse_y + 16, "(x: " + string(mouse_x div 32 * 32) + " y: " + string(mouse_y div 32 * 32) + ")");
    
    // Floating camera
    if (selectedTool == 0)
    {
    if (mouse_check_button_pressed(mb_right))
        {
        freeCamera = !freeCamera;
        }
    if (mouse_check_button_pressed(mb_left))
        {
         idd = instance_place(mouse_x, mouse_y, all);
         if (idd != -4) {freeCamera = false; target = (idd); lockedPosX = -1;}
         else {lockedPosX = mouse_x; lockedPosY = mouse_y;}
        }
    }
    
    // Cutscene maker
    if (selectedTool == 1)
    {
    if (subtool == 0)
    {
    if (mouse_check_button_pressed(mb_left))
        {
         ds_list_add(listX, mouse_x div 32 * 32);
         ds_list_add(listY, mouse_y div 32 * 32);
         ds_list_add(listSpeed, 4);
        }
    }    
    }
    
    // Properties
    if (selectedTool == 2)
    {
    if (subtool == 0)
    {
    if (mouse_check_button_pressed(mb_left))
        {
          if (instance_place(mouse_x, mouse_y, oPerlinWater) != noone)
          {
            var i;
            i = instance_place(mouse_x, mouse_y, oPerlinWater);
            
            i.strenghtVal += 20;
          }
        }
        if (mouse_check_button_pressed(mb_right))
        {
          if (instance_place(mouse_x, mouse_y, oPerlinWater) != noone)
          {
            var i;
            i = instance_place(mouse_x, mouse_y, oPerlinWater);
            
            i.strenghtVal -= 20;
          }
        }
      }    
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
