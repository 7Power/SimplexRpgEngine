<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Call alarm with delay

alarm[0] = 2;
colID = 0;

activeList  = ds_list_create();
activeList2 = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Optimize FOV

alarm[0] = 5;

instance_activate_all();

if (!oCamera.exportMap)
{
instance_deactivate_region(view_xview-200,view_yview-200,1200 + (view_wview - 800),1000 + (view_hview + 600),0,1);

instance_activate_object(oController);
instance_activate_object(oInventory);
instance_activate_object(oInventoryDepthHelper);
instance_activate_object(oPlayer);
instance_activate_object(oPlayerCombat);
instance_activate_object(oMinimap);
instance_activate_object(oHUD);
instance_activate_object(oDayNight);
instance_activate_object(oBestiar);
instance_activate_object(oScreenShader);
instance_activate_object(oQuest);
instance_activate_object(oTalentMenu);
instance_activate_object(oSpellMenu);
instance_activate_object(oStatusMenu);
instance_activate_object(oAchievement);
instance_activate_object(oState);
instance_activate_object(oDepthHelperAbovePlayer);
instance_activate_object(oThrowableItem);
instance_activate_object(oHudDepthHelper);
instance_activate_object(oEnemySpawner);
instance_activate_object(oCamera);
instance_activate_object(oParallaxMap);


// Further optimization of collision system
instance_deactivate_object(oNonsolidCollision);
instance_deactivate_object(oAdvancedCollision);
instance_deactivate_object(oBasicCollision);
instance_deactivate_object(oTransitionCollision);
instance_deactivate_object(oRoomTransition);
instance_activate_region(oPlayer.x - 96, oPlayer.y - 96, 160, 160, true);

// Reactivate needed coll points for enemy collisions
with(parEnemy)
    {
     instance_activate_region(x - 32, y - 32, 64, 64, true); 
    }
with(oThrowableItem)
    {
     instance_activate_region(x - 32, y - 32, 64, 64, true); 
    } 
with(oBasicSpell)
    {
     instance_activate_region(x - 32, y - 32, 64, 64, true); 
    }  
with(oLenghdirSpell)
    {
     instance_activate_region(x - 32, y - 32, 64, 64, true); 
    }     
collisionNearest[0] = instance_nearest(oPlayer.x, oPlayer.y, oNonsolidCollision);
collisionNearest[1] = instance_nearest(oPlayer.x, oPlayer.y, oAdvancedCollision);

with(oPlayer)
    {
     if (distance_to_object(oOptimize.collisionNearest[0]) &lt; distance_to_object(oOptimize.collisionNearest[1]))
        {
         oOptimize.nearestCol = 0;
        }
     else {oOptimize.nearestCol = 1;}
    }
    
if (nearestCol == 0){colID = collisionNearest[0];}
else {colID = collisionNearest[1];}

if (instance_number(oBunny &gt; 0))
    {
     with(oBunny)
     {
     instance_activate_region(other.x - 128, other.y - 128, 256, 256, true);
     }
    }

if (ds_list_size(activeList) &gt; 0)
{    
for (i = 0; i &lt; ds_list_size(activeList); i++)
    {
     instance_activate_object(activeList[| i]);
     
     if ((activeList[| i]).object_index == oAdvancedCollision)
        {
         if ((activeList[| i]).alpha &lt; 0.05) {ds_list_delete(activeList, i);}
        }
    }
}

if (ds_list_size(activeList2) &gt; 0)
{    
for (i = 0; i &lt; ds_list_size(activeList2); i++)
    {
     instance_activate_object(activeList2[| i]);
     
     if (!point_in_rectangle((activeList2[| i]).x, (activeList2[| i]).y, view_xview - 200, view_yview - 200, view_xview + view_wview + 200, view_yview + view_hview + 200))
        {
         instance_deactivate_object(((activeList2[| i]).id));
        } 
    }                                        
}

if (instance_number(oEnemySpell) &gt; 0)
   {
    with(oEnemySpell)
        {
         instance_activate_region(x - 64, y - 64, 128, 128, true);
        }
   }
   
if (instance_number(oProjectile) &gt; 0)
   {
    with(oProjectile)
        {
         instance_activate_region(x - 64, y - 64, 128, 128, true);
        }
   }
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flush tPages

draw_texture_flush()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump to player position

if (instance_number(oPlayer) &gt; 0)
   {
    x = oPlayer.x;
    y = oPlayer.y;
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
