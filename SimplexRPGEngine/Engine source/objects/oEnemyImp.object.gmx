<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEnemyImp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>parEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up
event_inherited();

scrEnemyIni(50, 3, 3, 1, "Fucking faggot", "Fucking faggot", "Fucker");
image_speed       = 0;
actionToDo        = "";
timerToNextAction = -1;
continueAction    = true;
actionRadius      = 256;
castTimer         = -1;
delayTimer        = -1;
canFire           = true;
speechQueue           = ds_queue_create();
speechAlpha           = 0;
speechIn              = false;
speechCurrentText     = "";
speechMode            = 0;
recursion             = 0;
tarX                  = -1;
tarY                  = -1;
lastDir               = "s";
mana                  = 100;
maxMana               = 100;
last_mp               = mana;


scrShaderPrepareColor();

alarm[0] = room_speed;

grid = mp_grid_create(x - 400, y - 300, (view_wview) / 32, (view_hview) / 32, 32, 32);
path = path_add();

mp_grid_clear_all(grid);
mp_grid_add_instances(grid, parSolid, false);
mp_grid_clear_rectangle(grid, x - 32, y - 32, x + 32, y + 32)

if (mp_grid_path(grid, path, x, y, x, y + 200, false)) {}

path_start(path, 3, path_action_stop, true);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free memory

path_delete(path);
ds_queue_destroy(speechQueue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = xprevious;
y = yprevious;

event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrEnemyCollision(other.id);

path_end();
x = xprevious;
y = yprevious;

if (place_free(x + 4, y))      {actionToDo = "runFast"; tarX = x + 8; tarY = y;}
else if (place_free(x - 4, y)) {actionToDo = "runFast"; tarX = x - 8; tarY = y;}
else if (place_free(x, y + 4)) {actionToDo = "runFast"; tarX = x; tarY = y + 8;}
else if (place_free(x, y - 4)) {actionToDo = "runFast"; tarX = x; tarY = y - 8;}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pathfanding safepoint

angle = random(360);
mp_grid_clear_rectangle(grid, x - 32, y - 32, x + 32, y + 32)
if (mp_grid_path(grid, path, x, y, x + cos(degtorad(angle)) * actionRadius, y + sin(degtorad(angle)) * actionRadius, false)) 
   {
   if (continueAction) {path_start(path, 3, path_action_stop, true); canFire = true;}
   continueAction = true;
   recursion = 0;
   }
else {recursion++; if (recursion &gt; 10) {actionToDo = "runFast"; tarX = x + 8; tarY = y;} else {event_user(3);}}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cast spell

spellToCast = choose(0);

if (spellToCast == 0)
{
var i = instance_create(x, y, oEnemySpell);
var d = point_direction(x, y, oPlayer.x, oPlayer.y);
i.direction = d + random_range(-5, 5);
i.speed     = 7;
i.casterID  = id;

delayTimer = secToSteps(0.5);
scrEnemySay(id, "[Casting spell 1]");
mana -= 20;
}

if (spellToCast == 1)
{
var d = point_direction(x, y, oPlayer.x, oPlayer.y) - 15;
for (var j = 0; j &lt; 3; j++)
{
var i = instance_create(x, y, oEnemySpell);
i.direction = d + (j * 15);
i.speed     = 7;
i.casterID  = id;

}
delayTimer = secToSteps(0.8);
scrEnemySay(id, "[Casting spell 2]");
} 

if (spellToCast == 2)
{
var i = instance_create(x, y, oEnemySpell);
var d = point_direction(x, y, oPlayer.x, oPlayer.y);
i.direction = d + random_range(-5, 5);
i.speed     = 3;
i.casterID  = id;

i.navigated = true;

delayTimer = secToSteps(0.5);
scrEnemySay(id, "[Casting spell 3]");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pathfinding

randomize();

if (choose(0, 0, 0, 1) == 1 &amp;&amp; canFire &amp;&amp; mana &gt;= 20)
   {
   // continueAction = false;
    castTimer = secToSteps(0.5);
    canFire = false;
    scrEnemySay(id, "[Preparing spell]");
    recursion = 0;
   }
else
{
angle = random(360);
mp_grid_clear_rectangle(grid, x - 32, y - 32, x + 32, y + 32)
if (mp_grid_path(grid, path, x, y, oPlayer.x + cos(degtorad(angle)) * actionRadius, oPlayer.y + sin(degtorad(angle)) * actionRadius, false)) 
   {
   if (continueAction) {path_start(path, 3, path_action_stop, true); canFire = true;}
   continueAction = true;
   recursion = 0;
   mana += 4;
   }
else {recursion++; if (recursion &lt; 10) {event_user(1);} else {event_user(3);}}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Loot

if (drop)
{
scrEnemyLoot(oHealthDrop, 1,  5,  true, 40, 2);
scrEnemyLoot(oXpDrop,     10, 12, true, 70, 2);
scrEnemyLoot(oManaDrop,   5,  15, true, 50, 1);
scrEnemyLoot(oArmorDrop,  2,  4,  true, 50, 1);
scrEnemyLoot(oGold2,      1,  4,  true, 30, 4);
scrEnemyLoot(oGem1,       1,  1,  true, 10, 2);
scrEnemyLoot(oGem2,       1,  1,  true, 10, 2);
scrEnemyLoot(oGem3,       1,  1,  true, 10, 2);
scrEnemyLoot(oGem4,       1,  1,  true, 10, 2);
scrEnemyLoot(oGem5,       1,  1,  true, 10, 2);
scrEnemyDie(true);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Current movement was finished

path_delete(path);
mp_grid_destroy(grid);
grid = mp_grid_create(x - 400, y - 300, (view_wview) / 32, (view_hview) / 32, 32, 32);
path = path_add();

mp_grid_clear_all(grid);
mp_grid_add_instances(grid, parSolid, false);
mp_grid_add_instances(grid, oBasicCollision, false);

// random point on circle
event_user(1);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self
event_inherited();
clr(c_white, 0.5);
//mp_grid_draw(grid);
clr();

mana = clamp(mana, 0, maxMana);
last_mp = lerp(last_mp, mana, 0.1);

if (mood == "dying")
   {
    path_end();
    speed = 0;
    image_speed = 0;
    image_index = 0;
   }

if (actionToDo == "runFast") {move_towards_point(tarX, tarY, 4); if (distance_to_point(tarX, tarY) &lt; 1) {actionToDo = ""; event_user(1);}}

dir = direction div 90 * 90;
image_speed = 0;
if (dir == 0) {lastDir = "d"; image_index = clamp(image_index, 8, 11.9) if (image_index == 11.9) {image_index = 8;} image_speed = 0.3;}
if (dir == 270) {lastDir = "s"; image_index = clamp(image_index, 0, 3.9) if (image_index == 3.9) {image_index = 0;} image_speed = 0.3;}
if (dir == 90) {lastDir = "w"; image_index = clamp(image_index, 12, 15.9) if (image_index == 15.9) {image_index = 0;} image_speed = 0.3;}
if (dir == 180) {lastDir = "a"; image_index = clamp(image_index, 4, 7.9) if (image_index == 7.9) {image_index = 4;} image_speed = 0.3;}

if (delayTimer &gt; 0 || castTimer &gt; 0) 
   {
    if (lastDir == "w") {image_index = 12;}
    if (lastDir == "s") {image_index = 0;}
    if (lastDir == "a") {image_index = 4;}
    if (lastDir == "d") {image_index = 8;}
    s_b = lerp(s_b, 0.3, 0.2);
    s_g = lerp(s_g, 0.3, 0.2);
   }
else {s_b = lerp(s_b, 1, 0.1); s_g = lerp(s_g, 1, 0.1);}

if (mood != "dying") 
   {
    scrShaderDrawColor();
   }
//draw_path(path, 0, 0, true);
//draw_circle(x, y, actionRadius, true);
//draw_circle(oPlayer.x, oPlayer.y, actionRadius, true);

if (castTimer  &gt; 0) {castTimer--;  if (castTimer  == 0) {event_user(2); castTimer  = -1;}}
if (delayTimer &gt; 0) {delayTimer--; if (delayTimer == 0) {event_user(1); delayTimer = -1;}}

    
    
   draw_set_font(fntPixelSmall);
   
    draw_sprite_general(sHealthBar,1,0,0,40,8,x-42,y-32,1,1,0,c_white,c_white,c_white,c_white,1);
   draw_sprite_part_ext(sHealthBar,0,0,0,((last_hp/max_hp)*40),8,x-42,y-32,1,1,c_white,1);
     draw_sprite_general(sHealthBar,1,0,0,40,8,x+2,y-32,1,1,0,c_white,c_white,c_white,c_white,1);
   draw_sprite_part_ext(sHealthBar,2,0,0,((last_mp/maxMana)*40),8,x+2,y-32,1,1,c_white,1);
  
   scrCenterText();
   draw_text_colour(x,y-40,name,c_black,c_black,c_black,c_black,1);
   scrCenterText(0);
if (mood != "dying")
{      
// Handle speech queue
if (ds_queue_size(speechQueue) &gt; 0)
    {
     if (!speechIn)
        {
         speechCurrentText = ds_queue_dequeue(speechQueue);
         speechIn = true;         
        }
    }          
    
if (speechIn)
    {
     if (speechMode == 0) {speechAlpha = lerp(speechAlpha, 1.1, 0.2); if (speechAlpha &gt;= 1) {speechMode = 1; speechTimer = 10;}}
     if (speechMode == 1) {speechTimer--; if (speechTimer &lt;= 0) {speechMode = 2;}}
     if (speechMode == 2) {speechAlpha = lerp(speechAlpha, -0.1, 0.2); if (speechAlpha &lt;= 0) {speechMode = 0; speechIn = false; speechTimer = 10;}}
     
     fnt();
     clr (c_black, speechAlpha / 2);
     draw_roundrect_colour_ext(x - string_width(speechCurrentText) / 2 - 10,y - 48,x + string_width(speechCurrentText) / 2+10,y+string_height(speechCurrentText)+2-48,20,20,c_black,c_black,0);
     clr(c_white, speechAlpha);
     draw_text(x - string_width(speechCurrentText) / 2, y - 48, speechCurrentText);
     clr();
    }
}    
    


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
