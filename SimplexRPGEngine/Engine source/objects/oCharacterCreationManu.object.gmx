<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up

bacAlpha        = 0;
mode            = "in";
currentQuestion = -1;
questionMode    = 0;
canProceed      = false;
headerAlpha     = 0;
optionsAlpha    = 0;
moveQuestion    = -1;
drawMode        = "header";
currentHeader   = 0;
hintAlpha       = 0;
answerSelected  = 0;
oPlayer.can_move2 = false;
proceedHelper   = false;
channel_mask    = shader_get_uniform(shdColor, "f_ChannelMask");

// Faster than bit by bit
for (var i = 4; i &gt;= 0; i--)
    {
     shdR[i] = 1;
     shdG[i] = 1;
     shdB[i] = 1; 
     imageAlpha[i] = 0.5; 
     imageScale[i] = 1;    
    }
    
imageName[0] = "Terra";
imageName[1] = "Ignis";
imageName[2] = "Agua";
imageName[3] = "Aer";



// Database
questionHeader[0] = "Je načase zjistit, co dovedeš. Zajímá mě, jak bys řešil některé situace, které tě na cestě můžou potkat."; 

question[0, 0] = "Jdeš sám lesem. Náhle před sebou uvidíš rozzuřeného kance.";
   question[0, 1] = "Kdo se bojí, nesmí do lesa! Zardousím ho holýma rukama.";                                                                            // Síla 
   question[0, 2] = "Vezmu nohy na ramena, s divokým kancem nejsou žerty.";                                                                               // Vytrvalost
   question[0, 3] = "Přesný šíp je rychlejší, než jakékoli zvíře. Lovecký luk je ideální.";                                                               // Lukostřelba
   question[0, 4] = "Vylezu na nejbližší strom, počkám až kanec doběsní. Potom ho vystopuji a až bude spát, vyřídím ho.";                                 // Zlodějina

question[1, 0] = "O něco později vidíš na stromě pověšeného člověka. Na prsou má přibitou ceduli s nápisem " + chr(34) + "zloděj" + chr(34) + ".";
   question[1, 1] = "Za své zločiny zaplatil. Odříznu ho a řádně pohřbím.";                                                                               // Čest
   question[1, 2] = "S takovými je potřeba se nemazlit! Jen ať visí dál, jako poučení pro podobnou chátru.";                                              // Řád
   question[1, 3] = "Tiše vzdám hold padlému bratru. Pak ho odříznu a prohledám ho, třeba něco zajímavého schoval před svými katy.";                      // Zlodějina
   question[1, 4] = "Takové plýtvání materiálem! Použiju to tělo k nácviku nekromantské magie.";                                                          // Krutost
   
question[2, 0] = "Přijdeš do malé vesnice. U brány mlátí biřic žebráka.";
   question[2, 1] = "Strčím biřicovi zlatku a přidám se k němu. Takovou zábavu si nenechám ujít!";                                                        // Krutost                     
   question[2, 2] = "Zmlátím biřice. Slabší si zaslouží zastání.";                                                                                        // Milosrdnost
   question[2, 3] = "Co je mi po tom? Žebrák ani biřic mě nezajímají.";                                                                                   // Chladnokrevnost
   question[2, 4] = "Počkám, až se biřic vyřádí a až odejde, žebráka dorazím. Pak to svedu na biřice a budu ho vydírat.";                                 // Vypočítavost
   
question[3, 0] = "Místní už dlouho sužuje krvelačný přízrak. Chudí vesničané tě požádají o pomoc, ale mohou si dovolit jen malou odměnu.";
   question[3, 1] = "Neoberu chudé o jejich poslední zlatky. Pomůžu jim zdarma.";                                                                         // Milosrdnost                   
   question[3, 2] = "Výdělek je výdělek. Na cestě se každá zlatka hodí. Vezmu to.";                                                                       // Vypočítavost
   question[3, 3] = "Zkusím z nich vyždímat co nejvíc. Určitě něco schovávají.";                                                                          // Chladnokrevnost
   question[3, 4] = "Nebudu kvůli malé odměně riskovat vlastní život. Ať si najdou někoho jiného.";                                                       // Povýšenost
   
question[4, 0] = "Připravuješ se na další cestu. Do kterému řemeslníkovi zajdeš nejdřív?";
   question[4, 1] = "Navštívím kováře, potřebuji nabrousit zbraně a vyspravit výzbroj.";                                                                  // Kovářství                   
   question[4, 2] = "Prohlídnu si místní cetky u vetešníka. Někdy prodávají ztracené artefakty a ani o tom neví.";                                        // Relikty
   question[4, 3] = "Zamířím k vesnické léčitelce pro čerstvou zásobu bylin k míchání lektvarů.";                                                         // Alchymie
   question[4, 4] = "Místní pochybné existence určitě mají na prodej nějaké paklíče.";                                                                    // Zlodějina
   
questionHeader[1] = "Vzbuzuješ ve mě pochyby, zda jsi na cestu připraven! Ale je to neodkladné, musíš jet. Snad na cestě zmoudříš.";
questionHeader[2] = "Dál ti řeknu pár slov. Chci vědět, co se ti při nich vybaví jako první.";

asociation[0, 0] = "Pes";
   asociation[0, 1] = "Přítel.";                                                                                                                          // Životy +6
   asociation[0, 2] = "Jídlo.";                                                                                                                           // Výřečnost
   asociation[0, 3] = "Kočka.";                                                                                                                           // Inteligence
   asociation[0, 4] = "Bezpečí.";                                                                                                                         // Mana +4
   
asociation[1, 0] = "Království";
   asociation[1, 1] = "Domov.";                                                                                                                           // Řád
   asociation[1, 2] = "Říše.";                                                                                                                            // Elegance
   asociation[1, 3] = "Cesta do záhuby.";                                                                                                                 // Inteligence
   asociation[1, 4] = "Relikt.";                                                                                                                          // Astrální vidění
   
asociation[2, 0] = "Moc";
   asociation[2, 1] = "Dvůr.";                                                                                                                            // Elegance
   asociation[2, 2] = "Magie.";                                                                                                                           // Magie
   asociation[2, 3] = "Vědění.";                                                                                                                          // Inteligence
   asociation[2, 4] = "Pořádná zbraň!";                                                                                                                   // Dvojruční zbraně
   
asociation[3, 0] = "Láska";
   asociation[3, 1] = "Štěstí.";                                                                                                                          // Optimismus
   asociation[3, 2] = "Zklamání.";                                                                                                                        // Pesimismus
   asociation[3, 3] = "Lásku je potřeba znovu vynalézt.";                                                                                                 // Vědění
   asociation[3, 4] = "Peníze!";                                                                                                                          // Realismus
   
asociation[4, 0] = "Naděje";
   asociation[4, 1] = "... umírá poslední.";                                                                                                              // Optimismus
   asociation[4, 3] = "Zítřek.";                                                                                                                          // Vědění
   asociation[4, 2] = "... je ztracena.";                                                                                                                 // Pesimismus
   asociation[4, 4] = "Zbytečnost, omezující zdravý úsedek.";                                                                                             // Realismus                             // Realismus
   
questionHeader[3] = "Pozoruhodné ideály mládí. Nakonec chci vědět něco o tvé podstatě.";
   
   

 
   
   
   
   




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Allow player to move

oPlayer.can_move2 = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Symbol bonus
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Asociations bonuses DB
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Question bonuses DB
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw menu

if (mode == "in")       {bacAlpha    = lerp(bacAlpha, 1, 0.1);}
if (mode == "out")      {bacAlpha    = lerp(bacAlpha, 0, 0.1); if (bacAlpha &lt; 0.05) {instance_destroy();}}
if (moveQuestion == 1)  {headerAlpha = lerp(headerAlpha, 0, 0.1); hintAlpha = headerAlpha; if (headerAlpha &lt; 0.05)  {if (drawMode == "header") {currentHeader++; if (currentHeader == 1) {drawMode = "question";} if (currentHeader == 3) {drawMode = "asociation"; currentQuestion = 0; proceedHelper = true;} if (currentHeader == 4) {drawMode = "symbol"; currentQuestion = 0; proceedHelper = true;}} if (drawMode == "question" || drawMode == "asociation") {currentQuestion++;} moveQuestion = -1;}}
if (moveQuestion == -1) {headerAlpha = lerp(headerAlpha, 1.1, 0.1); if (headerAlpha &gt;= 1) {moveQuestion = 0; if (drawMode == "header") {canProceed = true;} answerSelected = 0;}}
if (moveQuestion == 0)  {hintAlpha   = lerp(hintAlpha, 1.1, 0.1);}

if (keyboard_check_pressed(vk_enter) &amp;&amp; canProceed &amp;&amp; !proceedHelper) {canProceed = false; moveQuestion = 1;}

clr(c_black, bacAlpha / 10 * 8);
draw_rectangle(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, false);


alg("center", fntPixelBig);
if (drawMode == "header") 
   {
    if (proceedHelper) {proceedHelper = false; currentHeader--;}
    clr(c_white, min(bacAlpha, headerAlpha));
    draw_text(view_xview + 400, view_yview + 200, scrWordwrap(questionHeader[currentHeader], 500, fntPixelBig));
    sh = string_height(scrWordwrap(questionHeader[currentHeader], 500, fntPixelBig));
    clr(c_white, min(bacAlpha, hintAlpha));
    fnt(fntPixelSmall);
    draw_text(view_xview + 400, view_yview + 200 + sh, "[Enter]");    
   }

if (drawMode == "question") 
   {
    clr(c_white, min(bacAlpha, headerAlpha));
    draw_text(view_xview + 400, view_yview + 150, scrWordwrap(question[currentQuestion, 0], 500, fntPixelBig));
    sh = string_height(scrWordwrap(question[currentQuestion, 0], 500, fntPixelBig)); 
    
    var yy = sh + view_yview + 200;
    for (var i = 0; i &lt; 4; i++)
        {
         var text  = question[currentQuestion, (i + 1)];
         var color = c_white;
         if (i == answerSelected) {text = "&gt; " + text; color = c_yellow;}
         clr(color, min(bacAlpha, hintAlpha - 0.1));
         fnt(fntPixelSmall);
         draw_text(view_xview + 400, yy, scrWordwrap(text, 600, fntPixelSmall));
         yy += string_height(scrWordwrap(text, 600, fntPixelSmall)) + 16;
        }
    if (keyboard_check_pressed(ord("S"))) {if (answerSelected &lt; 3) {answerSelected++;} else {answerSelected = 0;} sfx(sndMenuNavigate);}
    if (keyboard_check_pressed(ord("W"))) {if (answerSelected &gt; 0) {answerSelected--;} else {answerSelected = 3;} sfx(sndMenuNavigate);}
    if (keyboard_check_pressed(vk_enter) &amp;&amp; moveQuestion == 0) {sfx(sndMenuConfirm); event_user(0); if (currentQuestion == 4) {drawMode = "header"; canProceed = false; proceedHelper = true; headerAlpha = 0;} moveQuestion = 1;}        
   }
   
if (drawMode == "asociation") 
   {
    if (proceedHelper) {proceedHelper = false; currentQuestion = 0;}      
    clr(c_white, min(bacAlpha, headerAlpha));
    draw_text(view_xview + 400, view_yview + 150, scrWordwrap(asociation[currentQuestion, 0], 500, fntPixelBig));
    sh = string_height(scrWordwrap(asociation[currentQuestion, 0], 500, fntPixelBig)); 
    
    var yy = sh + view_yview + 200;
    for (var i = 0; i &lt; 4; i++)
        {
         var text  = asociation[currentQuestion, (i + 1)];
         var color = c_white;
         if (i == answerSelected) {text = "&gt; " + text; color = c_yellow;}
         clr(color, min(bacAlpha, hintAlpha - 0.1));
         fnt(fntPixelSmall);
         draw_text(view_xview + 400, yy, scrWordwrap(text, 600, fntPixelSmall));
         yy += string_height(scrWordwrap(text, 600, fntPixelSmall)) + 16;
        }
    if (keyboard_check_pressed(ord("S"))) {if (answerSelected &lt; 3) {answerSelected++;} else {answerSelected = 0;} sfx(sndMenuNavigate);}
    if (keyboard_check_pressed(ord("W"))) {if (answerSelected &gt; 0) {answerSelected--;} else {answerSelected = 3;} sfx(sndMenuNavigate);}
    if (keyboard_check_pressed(vk_enter) &amp;&amp; moveQuestion == 0) {sfx(sndMenuConfirm); event_user(1); if (currentQuestion == 4) {drawMode = "header"; canProceed = false; proceedHelper = true; headerAlpha = 0;} moveQuestion = 1;}        
   } 
   
if (drawMode == "symbol") 
   {
    if (proceedHelper) {proceedHelper = false; currentQuestion = 0;}      
    clr(c_white, min(bacAlpha, headerAlpha));

    for (var i = 0; i &lt; 4; i++)
        {
         clr(-1, imageAlpha[i])
         shader_set(shdColor);
         shader_set_uniform_f(channel_mask, shdR[i], shdG[i], shdB[i], 1);
         draw_sprite_ext(sSymbols, i, view_xview + 70 + (160 * i) + 65, view_yview + 200 + 69, imageScale[i], imageScale[i], 0, c_white, min(imageAlpha[i], bacAlpha));
         shader_reset();
         if (answerSelected == i) 
            {
             imageAlpha[i] = lerp(imageAlpha[i], 1, 0.1); 
             imageScale[i] = lerp(imageScale[i], 1.2, 0.1);
             if (i == 0) {shdR[i] = lerp(shdR[i], 0, 0.2); shdB[i] = lerp(shdB[i], 0, 0.2);} 
             if (i == 1) {shdG[i] = lerp(shdG[i], 0, 0.2); shdB[i] = lerp(shdB[i], 0, 0.2);} 
             if (i == 2) {shdR[i] = lerp(shdR[i], 0, 0.2); shdG[i] = lerp(shdG[i], 0, 0.2);} 
             if (i == 3) {shdR[i] = lerp(shdR[i], 0, 0.2); shdG[i] = lerp(shdG[i], 0.5, 0.2); shdB[i] = lerp(shdB[i], 1, 0.2);} 
             
             clr(-1, min(bacAlpha, headerAlpha));
             draw_text( view_xview + 70 + (160 * i) + 65, view_yview + 200 + (69 * 2) + 15, "^");
             draw_text( view_xview + 70 + (160 * i) + 65, view_yview + 200 + (69 * 2) + 30, imageName[i]);             
            }
        else {imageAlpha[i] = lerp(imageAlpha[i], 0.5, 0.1); shdR[i] = lerp(shdR[i], 1, 0.2); shdG[i] = lerp(shdG[i], 1, 0.2); shdB[i] = lerp(shdB[i], 1, 0.2); imageScale[i] = lerp(imageScale[i], 1, 0.1);}
        }
    if (keyboard_check_pressed(ord("W"))) {if (answerSelected &lt; 3) {answerSelected++;} else {answerSelected = 0;} sfx(sndMenuNavigate);}
    if (keyboard_check_pressed(ord("S"))) {if (answerSelected &gt; 0) {answerSelected--;} else {answerSelected = 3;} sfx(sndMenuNavigate);}
    if (keyboard_check_pressed(vk_enter) &amp;&amp; moveQuestion == 0) {mode = "out"; event_user(2); sfx(sndMenuConfirm);}        
   } 
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
