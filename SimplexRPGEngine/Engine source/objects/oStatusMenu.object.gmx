<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up

activated           = false;
activatedAlpha      = 0;
itemsPerPage        = 16;
pages               = ceil(upgradableProperties / itemsPerPage);
currentPage         = 0;
selectedSkillsIndex = 1;
skillsIndexMax      = 5;
textAlpha           = 0;
textAlpha2          = 0;
hint                = "";
hint2               = "";
prevHit             = 0;
prevHit2            = 0;
push                = 0;
pushValue           = 0;
lastIndexOver       = 0;
indexAlpha          = 0;
textAlpha           = 0;
drawMode            = 0;

skillIndexName[1] = "Řemesla";
skillIndexName[2] = "Výřečnost";
skillIndexName[3] = "Čarodějnictví";
skillIndexName[4] = "Zlodějina";
skillIndexName[5] = "Zbraně";

cName[0] = "Předměty";
cName[1] = "Knihy";
cName[2] = "Fragmenty minulosti";
cName[3] = "Ocenění";

cNameSelected = 0;


xoffset = 10;
yoffset = 0;

for(i = 0; i &lt; celkem_vlastnosti; i++)
    {
     propertyColor[i] = c_white;
    }

// consts    
incHealth = 5;
incMana = 3;


for (var j = 0; j &lt; 4; j++)
    {
     for (var i = 0; i &lt; 40; i++)
         {
          collectibleUnlocked[j, i] = false;
          collectibleIndex[j, i]    = 86;
          collectibleCaption[j, i]  = "";
         }
     }
scrCollectibleDefine(collectibleEnum.item, 0, "Kvejkova soška", "Vzpomínka na všumělce, který stál u zrodu Simplexu. Kvejk je programátor, herní designer, hudební skladatel a bůh ví, co ještě.", "bonusové zlato +1%");
scrCollectibleDefine(collectibleEnum.item, 1, "Princeznovská korunka Poslední jednorožky", "Věnováno Poslední jednorožce a jejímu nezbednému nosíku. Nejkrásnější věci bývají nejdál.", "bonusové zlato +1%", 87);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset properties color

for (i = 0; i &lt; celkem_vlastnosti; i++)
    {
     if (apiPlayerGetProperty(i)) {if (returnedArray[2] != 0 &amp;&amp; returnedArray[1]) {propertyColor[i] = c_white;}}
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset properties color

for (i = 0; i &lt; celkem_vlastnosti; i++)
    {
     if (apiPlayerGetProperty(i)) {if (returnedArray[2] == 0 &amp;&amp; returnedArray[1]) {propertyColor[i] = c_white;}}
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset properties color

for (i = 0; i &lt; celkem_vlastnosti; i++)
    {
     propertyColor[i] = c_white;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self
 
// Temp vars
xx   = view_xview;
yy   = view_yview + 48;
ti   = 0;
hit  = false;

if (keyboard_check_pressed(ord("T")))
   {
    if (scrGettActiveComponent())
       {
        activated = false;
        scrSetActiveComponent(false);
       }
   } 

// Lerp main alpha channel
if (activated) {scrSetActiveComponent(true); activatedAlpha = lerp(activatedAlpha, 1, 0.1); push = false; pushValue = 0;}
else           {activatedAlpha = lerp(activatedAlpha, 0, 0.1);}

if (push) {pushValue = lerp(pushValue, 800, 0.1);}

// Draw form
if (activatedAlpha &gt; 0.05)
{
fnt();
clr(c_black, ((activatedAlpha / 4) * 3));
draw_rectangle(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, false);
clr(c_white, activatedAlpha)

// Draw overall header
alg("center", fntPixelHuge);
s  = oPlayer.name + ", úroveň " + string(oPlayer.vlastnost[vlastnost_level]) + " - " + apiPlayerGetRankName();
sW = string_width(s);
draw_text_colored(view_xview + 400, view_yview + 24, s); 
fnt(fntPixelSmall);
alg();

c1 = c_white;
c2 = c_white;
c3 = c_white;
t  = "[Sbírka]";
if (drawMode == 1) {t = "[-&gt; Sbírka]";}

if (mouse_in(view_xview + 400 - (sW / 2) - string_width("&lt; Magie") - 16, view_xview + 400 - (sW / 2) - 16, view_yview + 10, view_yview + 24))
   {
    c1 = c_lime;
    
    if (mouse_check_button_pressed(mb_left))
       {
        activated = false;
        oSpellMenu.mode      = "in"; 
        oSpellMenu.draw      = true;       
        push = true; 
       }
   }
   
if (mouse_in(view_xview + 400 + (sW / 2) + 16, view_xview + 400 + (sW / 2) + 16 + string_width("Talenty &gt;"), view_yview + 10, view_yview + 24))
   {
    c2 = c_lime;
    
    if (mouse_check_button_pressed(mb_left))
       {
        activated = false;
        oTalentMenu.draw     = true;
        oTalentMenu.bacAlpha = 1;
        oTalentMenu.mode     = "in";     
        push = true; 
       }
   }
   
if (mouse_in(view_xview + 730, view_xview + 730 + string_width(t), view_yview + 10, view_yview + 24))
   {
    c3 = c_lime;
    
    if (mouse_check_button_pressed(mb_left))
       {
        if (drawMode == 0) {drawMode = 1;}
        else {drawMode = 0;}
       }
   }   
clr(c1, -1);
draw_text(view_xview + 400 - (sW / 2) - string_width("&lt; Magie") - 16, view_yview + 4, "&lt; Magie");
clr(c2, -1);
draw_text(view_xview + 400 + (sW / 2) + 16, view_yview + 4, "Talenty &gt;");
clr(c3, -1);
alg("center", fntPixelSmall);
draw_text(view_xview + 750, view_yview + 15, t);
alg();
clr(c_white, -1);

fnt();

if (drawMode == 0)
{
// Draw attributes
propertyPointsText = "";
if (oPlayer.skillPoints &gt; 0) {propertyPointsText = "(" + scrColorflag(c_lime) + "+" + string(oPlayer.skillPoints) + scrEndColorflag() + ")";}
draw_text_colored(xx + xoffset, yy + yoffset, "Vlastnosti " + propertyPointsText);
clr(c_white, activatedAlpha / 2);
draw_line(xx + xoffset, yy + yoffset + 24, xx + xoffset + 220, yy + yoffset + 24);
clr(c_white, activatedAlpha)

tempY = 32;
for (i = 0; i &lt; celkem_vlastnosti; i++)  
    {
     // If searched property is defined in player's properties and it's a basic property
     if (apiPlayerGetProperty(i)) 
        {
         if (returnedArray[2] == 0 &amp;&amp; returnedArray[1])
         {
          draw_text_colored(xx + xoffset, yy + yoffset + tempY, returnedArray[0] + ": " + scrColorText(apiPlayerGetPropertyValue(i, true), propertyColor[i]));
          
          // If player have some points to spend
          if (oPlayer.skillPoints &gt; 0) 
              {
               color = c_white;
               if (mouse_in(xx + xoffset + 192, xx + xoffset + 200 + 16, yy + yoffset + tempY, yy + yoffset + tempY + 24))
                   {
                    color = c_lime;
                    
                    if (returnedArray[3] != "")
                    {
                     hint    = returnedArray[3];     
                     hit     = true;
                     if (prevHit != i) {textAlpha = 0;}
                     prevHit = i;
                    }
                                        
                    // Assign point to property on click
                    if (mouse_check_button_pressed(mb_left))
                        {
                         oPlayer.skillPoints--;
                         oPlayer.vlastnost[i]++;
                         if (i == vlastnost_odolnost) {oPlayer.vlastnost[vlastnost_zivot] += incHealth;}
                         if (i == vlastnost_inteligence) {oPlayer.vlastnost[vlastnost_mana] += incMana;}
                         propertyColor[i] = c_yellow;
                         
                         audio_play_sound(sndSkillUp, 0, false);
                        }
                   }
                   
               draw_text_colour(xx + xoffset + 200, yy + yoffset + tempY, "+", color, color, color, color, draw_get_alpha());               
              }
              
          tempY += 32;
         }
        }
        
     ti++; // Normalized interated index
    } 
    
// Draw hint
if (hit) {textAlpha = lerp(textAlpha, 1, 0.1);}
else {textAlpha = lerp(textAlpha, 0, 0.1);}

if (textAlpha &gt; 0.01)
   {
    fnt(fntPixelSmall);
    clr(c_white, min(textAlpha, activatedAlpha));
    draw_text_colored(xx + xoffset, yy + yoffset + tempY, hint);
    clr(c_white);
   }
nx = xx + xoffset;
ny = yy + yoffset + tempY;

// Draw skills form
fnt();
xx   = view_xview + 280;
yy   = view_yview + 48;
ti   = 0;

// Skills header
propertyPointsText = "";
if (oPlayer.propertyPoints &gt; 0) {propertyPointsText = "(" + scrColorflag(c_lime) + "+" + string(oPlayer.propertyPoints) + scrEndColorflag() + ")";}
clr(c_white, activatedAlpha);
draw_text_colored(xx + xoffset, yy + yoffset, "Dovednosti " + propertyPointsText);
clr(c_white, activatedAlpha / 2);
draw_line(xx + xoffset, yy + yoffset + 24, xx + xoffset + 220, yy + yoffset + 24);
clr(c_white, activatedAlpha)
fnt();

// Skills navigation
c1 = c_white;
c2 = c_white;

// Back item navigation
if (mouse_in(xx + xoffset - 8, xx + xoffset + 8, yy + yoffset + 28, yy + yoffset + 56))
    {
     c1 = c_lime;
     
     if (mouse_check_button_pressed(mb_left))
        {
         if (selectedSkillsIndex &gt; 1) 
            {
             selectedSkillsIndex--;
             audio_play_sound(sndMenuClick1, 0, false);
            }
        }
    }
// Next item navigation
if (mouse_in(xx + xoffset + 202, xx + xoffset + 232, yy + yoffset + 28, yy + yoffset + 56))
    {
     c2 = c_lime;
     
     if (mouse_check_button_pressed(mb_left))
        {
         if (selectedSkillsIndex &lt; skillsIndexMax) 
            {
             selectedSkillsIndex++;
             audio_play_sound(sndMenuClick1, 0, false);
            }
        }
    }
    
tempText = skillIndexName[selectedSkillsIndex];
draw_text(xx + xoffset + ((220 - string_width(tempText)) / 2), yy + yoffset + 32, tempText);
draw_text_colour(xx + xoffset, yy + yoffset + 32, "&lt;", c1, c1, c1, c1, draw_get_alpha()); 
draw_text_colour(xx + xoffset + 210, yy + yoffset + 32, "&gt;", c2, c2, c2, c2, draw_get_alpha()); 
  
tempY = 64;
hit   = false;
for (i = 0; i &lt; celkem_vlastnosti; i++)  
    {
     // If searched property is defined in player's properties and it's a basic property
     if (apiPlayerGetProperty(i)) 
        {
         if (returnedArray[2] == selectedSkillsIndex &amp;&amp; returnedArray[1])
         {
          draw_text_colored(xx + xoffset, yy + yoffset + tempY, returnedArray[0] + ": " + scrColorText(apiPlayerGetPropertyValue(i, true), propertyColor[i]));
          
          // If player have some points to spend
          if (oPlayer.propertyPoints &gt; 0) 
              {
               color = c_white;
               if (mouse_in(xx + xoffset + 192, xx + xoffset + 200 + 16, yy + yoffset + tempY, yy + yoffset + tempY + 24))
                   {
                    color = c_lime;
                   
                    if (returnedArray[3] != "")
                       {
                        hint2    = returnedArray[3];     
                        hit      = true;
                        if (prevHit2 != i) {textAlpha2 = 0;}
                        prevHit2 = i;
                       }
                   
                    // Assign point to property on click
                    if (mouse_check_button_pressed(mb_left))
                        {
                         oPlayer.propertyPoints--;
                         oPlayer.vlastnost[i]++;
                         audio_play_sound(sndSkillUp, 0, false);
                         
                         propertyColor[i] = c_yellow;
                        }
                   }
                   
               draw_text_colour(xx + xoffset + 200, yy + yoffset + tempY, "+", color, color, color, color, draw_get_alpha());
               
              }
              
          tempY += 32;
         }
        }
        
     ti++; // Normalized interated index
    }
    
// Draw hint
if (hit) {textAlpha2  = lerp(textAlpha2, 1, 0.1);}
else {textAlpha2      = lerp(textAlpha2, 0, 0.1);}
      
if (textAlpha2 &gt; 0.01)
   {   
    fnt(fntPixelSmall);
    clr(c_white, min(textAlpha2, activatedAlpha));
    draw_text_colored(nx, ny, hint2);
    clr(c_white);
   }
   
    
// Now draw player's status
fnt();
xx   = view_xview;
yy   = view_yview + 396;
ti   = 0;

draw_text_colored(xx + xoffset, yy + yoffset, "Kondice");
clr(c_white, activatedAlpha / 2);
draw_line(xx + xoffset, yy + yoffset + 24, xx + xoffset + 220, yy + yoffset + 24);
clr(c_white, activatedAlpha)
fnt();

draw_text_colored(xx + xoffset, yy + yoffset + 32, "Zdraví: " + string(round(oPlayer.vlastnost[vlastnost_zivot])) + " / " + string(oPlayer.maxHp));
draw_text_colored(xx + xoffset, yy + yoffset + 64, "Mana: " + string(round(oPlayer.vlastnost[vlastnost_mana])) + " / " + string(oPlayer.maxMp));
draw_text_colored(xx + xoffset, yy + yoffset + 96, "Štít: " + string(round(oPlayer.vlastnost[vlastnost_stit])) + " / " + string(oPlayer.vlastnost[vlastnost_max_stit]));
draw_text_colored(xx + xoffset, yy + yoffset + 128, "Stamina: " + string(round(oPlayer.vlastnost[vlastnost_stamina])) + " / " + string(oPlayer.vlastnost[vlastnost_max_stamina]));

// Lastly player's resistances
fnt();
xx   = view_xview + 280;
yy   = view_yview + 396;
ti   = 0;

draw_text_colored(xx + xoffset, yy + yoffset, "Odolnosti");
clr(c_white, activatedAlpha / 2);
draw_line(xx + xoffset, yy + yoffset + 24, xx + xoffset + 220, yy + yoffset + 24);
clr(c_white, activatedAlpha)

fnt(fntPixelSmall);
tempY = 32;
for (i = 0; i &lt; celkem_vlastnosti; i++)  
    {
     // If searched property is defined in player's properties and it's a basic property
     if (apiPlayerGetProperty(i)) 
        {
         if (returnedArray[2] == 666 &amp;&amp; !returnedArray[1])
         {
          draw_text_colored(xx + xoffset, yy + yoffset + tempY, returnedArray[0] + ": " + scrColorflag(propertyColor[i]) + string(oPlayer.vlastnost[i]) + scrEndColorflag() + " ");
          tempY += 22;
         }
        }
        
     ti++; // Normalized interated index
    } 
    
// Player's bonuses, last thing, I swear
fnt();
xx   = view_xview + 540;
yy   = view_yview + 396;
ti   = 0;

draw_text_colored(xx + xoffset, yy + yoffset, "Bonusy");
clr(c_white, activatedAlpha / 2);
draw_line(xx + xoffset, yy + yoffset + 24, xx + xoffset + 220, yy + yoffset + 24);
clr(c_white, activatedAlpha);

fnt(fntPixelSmall);
tempY = 32;
for (i = 0; i &lt; celkem_vlastnosti; i++)  
    {
     // If searched property is defined in player's properties and it's a bonus, unupgradable property
     if (apiPlayerGetProperty(i)) 
        {
         if (returnedArray[2] == 1000 &amp;&amp; !returnedArray[1] &amp;&amp; oPlayer.vlastnost[i] &gt; 0)
         {
          draw_text_colored(xx + xoffset, yy + yoffset + tempY, returnedArray[0] + ": " + string(oPlayer.vlastnost[i]) + "%");
          tempY += 22;
         }
        }
        
     ti++;
    }    
fnt();
clr();

// I lied... here comes the last part
xx   = view_xview + 540;
yy   = view_yview + 48;
ti   = 0;

clr(c_white, activatedAlpha);
draw_text_colored(xx + xoffset, yy + yoffset, "Status ");
clr(c_white, activatedAlpha / 2);
draw_line(xx + xoffset, yy + yoffset + 24, xx + xoffset + 220, yy + yoffset + 24);
clr(c_white, activatedAlpha);

draw_text_colored(xx + xoffset, yy + yoffset + 32, "Poškození: " + string(round(oPlayer.vlastnost[vlastnost_poskozeni])));
draw_text_colored(xx + xoffset, yy + yoffset + 64, "Obrana: " + string(round(oPlayer.vlastnost[vlastnost_defense])));
draw_text_colored(xx + xoffset, yy + yoffset + 96, "Šance na kritický úder: " + string(round(oPlayer.vlastnost[vlastnost_kriticka_sance])) + "%");
fnt(fntPixelSmall); draw_text_colored(xx + xoffset + 16, yy + yoffset + 128, "- Kritické poškození: " + string(round(oPlayer.vlastnost[vlastnost_kriticka_nasobic] * 100)) + "%"); fnt();

 }
if (drawMode == 1)
   {
    xx = view_xview + 160;
    yy = view_yview + 128;
    indexOver = -1;
    
    //  Navigation
    for (var i = 0; i &lt; array_length_1d(cName); i++)
        {
         var text  = cName[i];
         var color = c_white;
         
         if (cNameSelected == i) {text = "&gt; " + cName[i]; color = c_yellow;}
         
         clr(color, -1);
         draw_text(view_xview + 10, view_yview + 30 + (i * 20), text);
        }

    if (keyboard_check_pressed(vk_down)) {if (cNameSelected &lt; array_length_1d(cName) - 1) {cNameSelected++;} else {cNameSelected = 0;} indexAlpha = 0; textAlpha = 0;}    
    if (keyboard_check_pressed(vk_up)) {if (cNameSelected &gt; 0) {cNameSelected--;} else {cNameSelected = array_length_1d(cName) - 1;} indexAlpha = 0; textAlpha = 0;}    
    
    
    // Collectibles
    for (var i = 0; i &lt; 4; i++)
        {
         for (var j = 0; j &lt; 10; j++)    
             {              
              var index = scrArray2DTo1D(j, i, 10);
              var color = c_yellow;
              
              if (mouse_in(xx, xx + 32, yy, yy + 32) &amp;&amp; collectibleUnlocked[cNameSelected, index])
                 {
                  color = c_lime;
                  lastIndexOver = index;
                  indexOver = index;
                 }
              
              if (!collectibleUnlocked[cNameSelected, index])
                 {
                  clr(c_gray, activatedAlpha / 3);
                  draw_roundrect(xx, yy, xx + 32, yy + 32, false);
                  clr(c_gray, activatedAlpha / 2);
                  draw_roundrect(xx, yy, xx + 32, yy + 32, true);
                 
                  clr(c_white, activatedAlpha / 4 * 3); 
                  draw_text(xx + 13, yy + 5, "?");                 
                 }
              else
                  {
                   clr(color, activatedAlpha / 3);
                   draw_roundrect(xx, yy, xx + 32, yy + 32, false);
                   clr(color, activatedAlpha / 2);
                   draw_roundrect(xx, yy, xx + 32, yy + 32, true);

                   clr(c_white, activatedAlpha); 
                   draw_sprite(sTestItem, collectibleIndex[cNameSelected, index], xx + 18, yy + 16);
                  }
              
              xx += 48;
             }
         xx = view_xview + 160;
         yy += 48;
        }

    if (indexOver != -1) {indexAlpha = lerp(indexAlpha, 1, 0.1); if (indexAlpha &gt; 0.2) {textAlpha = lin(textAlpha, 1, 0.05);}}
    else {indexAlpha = lerp(indexAlpha, 0, 0.1); textAlpha = lerp(indexAlpha, 0, 0.1);}
        
    if (indexAlpha &gt; 0.02 || textAlpha &gt; 0.02)
       {
        alg("center", fntPixelHuge);
        clr(c_white, min(activatedAlpha, indexAlpha));
        draw_text(view_xview + 400, view_yview + 330, collectibleCaption[cNameSelected, lastIndexOver]);
        alg();
        fnt(fntPixel);
        clr(c_white, min(activatedAlpha, textAlpha));        
        draw_text_colored(view_xview + 20, view_yview + 360, collectibleText[cNameSelected, lastIndexOver]);
        h = string_height(collectibleText[cNameSelected, lastIndexOver]);
        fnt(fntPixelSmall);
        draw_text_colour(view_xview + 20, view_yview + 360 + h, "Odkaz: " + collectibleFooter[cNameSelected, lastIndexOver], c_yellow, c_yellow, c_yellow, c_yellow, min(activatedAlpha, textAlpha)); 
       }
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
