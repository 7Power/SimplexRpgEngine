<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-205</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up

global.temp     = -1;
global.volFX    = 100;
global.volMX    = 100;
draw            = 1;
alpha[0]        = 0;
alpha[1]        = 0;
alpha[2]        = 0;
alpha[3]        = 0;
die             = 0;
die_alpha       = 0;
cStep           = 0;
effect_scale    = 1;
draw_bestiary   = 0;
temp_inv        = 0;
temp_inv2       = 0;
draw_stats      = 0;
stats_alpha     = 0;
draw_quest      = 0;
effect_scale2   = 1;
skillPointsA    = 0.5;
skillPointsM    = 0;
Sname           = part_system_create();
ticks           = 0;
maxTicks        = 30;
draw_crafting   = 0;
scale_crafting  = 1;
draw_equipment  = 0;
scale_equipment = 1;
draw_status     = 0;
scale_status    = 1;
spellsxPlus     = 16;
forceDB         = false;
expxPlus        = 8;
craftingHelper  = -1;
craftingTitle   = "Výroba";
craftingMenuAlpha    = 1;
craftingPreview      = "";
craftingMenuIndex[0] = "Předměty";
craftingMenuIndex[1] = "Zdokonalení";
craftingMenuIndex[2] = "Materiály";
craftingMenuIndex[3] = "Zušlechtění";
craftingMenuIndex[4] = "Alchymie";
craftingMenuIndex[5] = "Kulinářství";
craftingMenuIndex[6] = "Opravit předmět";
craftingTitleHelper  = "";
activeComponent      = false;
tempComponent        = false;
tempSpr              = 0;
drawTip              = -1;
drawTipAlpha         = 0;
drawTipTempIndex     = -1;
instance_create(x, y, oHudDepthHelper);

drawCraftingMenu = 1;
craftingSelectedIndex = -1;
selectedIndexY = -1;
craftingPageSelected = 0;
craftingKnownItems = ds_list_create();
craftingKnownMaterials = ds_list_create();
craftingKnownAlchemy = ds_list_create();
craftingKnownFood    = ds_list_create();
craftingItemsNewFlag[0, 48] = false;
craftingItemsSlot[0, 48] = -1;
craftingItemsLevelReq[0, 38] = 0;
craftingMaterialsNewFlag[0, 48] = false;
craftingAlchemyNewFlag[0, 48] = false;
craftingFoodNewFlag[0, 48] = false;
craftingEntriesPerPage = 48;
craftingEntriesPerRow  = 8;
craftingItemsSprite[0, 48] = 0;
craftingMaterialsSprite[0, 48] = 0;
craftingAlchemySprite[0, 48] = 0;
craftingFoodSprite[0, 48] = 0;
craftingItemsName[0, 48] = "";
craftingMaterialsName[0, 48] = "";
craftingAlchemyName[0, 48] = "";
craftingFoodName[0, 48] = "";
craftingSelectedItem = -1;
craftingDetails = false;
craftingDetailsHeight = 0;
craftingDetailsAlpha = 0;
craftingSlot[10, 5] = 0;
craftingDetailsText[0, 48] = "";
craftingAlchemyDetailsText[0, 48] = "";
craftingMaterialsDetailsText[0, 48] = "";
craftingFoodDetailsText[0, 48] = "";
craftingTitleHelper2 = "";

craftingSlotFree[10] = true;
craftingSlotSprite[10] = -1;
craftingSlotID[10] = 0;
craftingSlotItemID[10] = -1;
craftingSlotNumber[10] = -1;
craftingSlotOptional[10] = false;

upgradingItemID = -1;
upgradingItemSprite = 0;
upgradingItemSlotID = -1;

enchantItemID[0] = -1;
enchantItemID[1] = -1;
enchantItemID[2] = -1;
enchantItemID[3] = -1;
enchantItemSprite[3] = 0;
enchantItemSlotID[3] = -1;

enrichtItemID = -1;
enrichtItemSprite = 0;
enrichtItemSlotID = -1;
enrichtingOutputSprite = 0;

repairItemID = -1;
repairItemSprite = 0;
repairItemSlotID = -1;

for(i = 0; i &lt; celkem_vlastnosti; i++)  
      {
       cp[i] = 0;
      }

// TEST - CRAFTING
// *****************************************

// Crafting Item
craftingItemsSprite[0, 3] = 3; // Wooden sword
scrCraftingSetItemKnown(3, "Dřevěný meč", "Poškození: " + scrColorflag(c_lime) + "5" + scrEndColorflag() + " - " + scrColorflag(c_lime) + "8#" + scrEndColorflag() + "Stamina na úder: " + scrColorflag(c_red) + "4 " + scrEndColorflag() + "- " + scrColorflag(c_red) + "5#", 4);

// Crafting Material
craftingMaterialsSprite[0, 3] = 25; // Steel
scrCraftingSetMaterialKnown(3, "Ocel", "Základní materiál.");

// Crafting alchemy
craftingAlchemySprite[0, 3] = 28; // HP Pot
scrCraftingSetAlchemyKnown(3, "Lektvar zdraví", "Jednoduchý dryák s léčivými účinky.");

// Crafting food
craftingFoodSprite[0, 3] = (itemEnum.itemFoodCheese - 1); // HP Pot
scrCraftingSetFoodKnown(3, "Sýr", "Voňavý sýr.");


iconActive[hudIcons.bestiary]  = true;
iconActive[hudIcons.inventory] = true;
iconActive[hudIcons.quest]     = true;
iconActive[hudIcons.crafting]  = false;
iconActive[hudIcons.equipment] = false;
iconActive[hudIcons.status]    = true;

iconAlpha[hudIcons.bestiary]  = 1;
iconAlpha[hudIcons.inventory] = 1;
iconAlpha[hudIcons.quest]     = 1;
iconAlpha[hudIcons.crafting]  = 0.6;
iconAlpha[hudIcons.equipment] = 0.6;
iconAlpha[hudIcons.status]    = 1;

normalxoffset = (view_wview - view_wview); 
halfxoffset   = (normalxoffset / 2)
spellsxPlus  += halfxoffset;
yoffset       = (view_hview - view_hview);

baseFormulaX = (x + 540);
spellMinY    = (y + 560 + yoffset - 10);
spellMaxY    = (y + 560 + yoffset + 30);

can_draw = false;

spellsPage = 0;
drawItemsSlots  = false;

itemSlot[0, 0] = 0;
itemSlot[1, 0] = 0;
itemSlot[2, 0] = 0;
itemSlot[3, 0] = 0;
itemSlotsAlpha = 0;

hudAlpha = 1;

scrAchievementRegister(0, "Objevil jsi Simplex!", "Vítej, vývojáři.", 0, medalEnum.diamond);

scrAchievementUnlock(0);

for (i = 0; i &lt; 9; i++)
{
hotslot[i, 0] = 0;  //id, slotType {spell;item}, alpha, realSlotType
hotslot[i, 1] = 0;
hotslot[i, 2] = 0;
hotslot[i, 3] = 0;

}


for (i = 0; i &lt; 10; i++)
    {
    spellAlpha[i] = 0;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy PSystem

part_system_destroy(Sname);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump to player position

if (instance_number(oPlayer) &gt; 0) {x = oPlayer.x; y = oPlayer.y;}
draw = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw HUD

if (view_current == 0)
{
x = view_xview;
y = view_yview;

if (room == mapHouseAlice) {draw = false;}

if (!draw) {hudAlpha = lerp(hudAlpha, 0, 0.1);}
else {hudAlpha = lerp(hudAlpha, 1, 0.1);}

if (instance_number(oPlayer) &gt; 0 &amp;&amp; hudAlpha &gt; 0.02)
{ 
// Call update scripts
scrAffectsUpdate();      
apiPlayerUpdateProperties();

// Reset draw mode + set text align to center
clr(c_black, hudAlpha);
alg("center", fntPixelSmall);    
scrHudDrawXpBar(0, 588);

qx      = 184 + view_xview;
qy      = 548 + view_yview;
canBind = true;
temp    = false;

alg();
for (z = 0; z &lt; 9; z++)
     {
     clr(c_black, hudAlpha);
     draw_sprite(sSpellsUI, 4, qx, qy);
     
     // Adjust slot alpha effect
     if (hotslot[z, 3] == 1 || hotslot[z, 3] == 2 || hotslot[z, 1] == 2) {hotslot[z, 2] = lerp(hotslot[z, 2], 1, 0.1);} 
     else {hotslot[z, 2] = lerp(hotslot[z, 2], 0, 0.1); if (hotslot[z, 2] &lt; 0.05) {hotslot[z, 1] = 0;}}
     
     if (hotslot[z, 2] &gt; 0 || hotslot[z, 1] == 2) 
        {
         // Handle items
         if (hotslot[z, 1] == 1) {clr(-1, min(hotslot[z, 2],hudAlpha)); draw_sprite(sSpellsUI, 2, qx, qy); clr();}
         
         // Spells
         if (hotslot[z, 1] == 2) 
            {
             clr(-1, min(hotslot[z, 2],hudAlpha)); 
             draw_sprite(hotslot[z, 3], 0, qx, qy);  
             
             // Draw spell cooldown 
             var index = apiPlayerSpellCast(z, true);
             if (oPlayer.spell_cd[index] &gt; 0)
                {
                 clr(c_red, min(0.5, hudAlpha));
                 draw_rectangle_cd(qx + 2, qy + 2, qx + 32, qy + 32, 360 - ((oPlayer.spell_cd[index] / (oPlayer.temp_cd[index]) * 360)));
                }
             clr(-1, min(hotslot[z, 2],hudAlpha));
             draw_sprite(sSpellsUI, 1, qx, qy);
             clr();             
            }
        }
        
     // Draw slot action button
     fnt(fntPixelTiny);
     clr(c_black, -1);
     draw_text(qx + 1 + 22, qy + 1 + 14, string(z + 1));     
     clr(c_white, -1);
     draw_text(qx + 22, qy + 14, string(z + 1));
     clr(c_black, -1);
     fnt();
    
     if (mouse_in(qx, qx + 48, qy, qy + 48) &amp;&amp; canBind)
        {
          if (oInventory.drag &amp;&amp; mouse_check_button_released(mb_left) &amp;&amp; oInventory.slot_vlastnosti[oInventory.h_c, vlastnost_canBeFastEquiped])
                    {
                      // If any other slot is occupied by the same item, delete the old reference
                      for (zz = 0; zz &lt; 9; zz++)
                          {
                           if (hotslot[zz, 0] == oInventory.equip_sprite_s[6])
                              {
                               hotslot[zz, 0] = 0;
                               hotslot[zz, 3] = 0;                     
                              }
                          }
                                             
                      hotslot[z, 0] = oInventory.equip_sprite_s[6];
                      canBind       = false;
                      hotslot[z, 1] = 1;
                      hotslot[z, 3] = 1;
                      temp          = true;
                    }
          else 
          {
          if (mouse_check_button_pressed(mb_left))
                    {
                     hotslot[z, 0] = 0;
                     hotslot[z, 3] = 0;
                     if (hotslot[z, 1] == 2) {hotslot[z, 1] = 0;}
                    }
          if (mouse_check_button_pressed(mb_right))
                    {
                     drawTip = z;
                     drawTipTempIndex = z;
                    }
             
          }                  
        }
        
     if (hotslot[z, 0] != 0)
        {
         draw_sprite(sTestItem, (hotslot[z, 0] - 1), qx + 16, qy + 16);                  
        }    
     
     // Check if item still exists in the inventory &amp;&amp; draw it's count   
     clr(-1, hudAlpha);
     var number = -1;
     if (hotslot[z, 3] != 0 &amp;&amp; !temp &amp;&amp; hotslot[z, 1] != 2) 
        {

        number = inventoryNumber(hotslot[z, 0]);
        if (number == 0) {hotslot[z, 0] = 0; hotslot[z, 3] = 0;}
       
     clr(c_black, hudAlpha / 2);
     draw_roundrect_ext(qx+23-(string_width(string(number))/2),qy,qx+26+(string_width(string(number))/2),qy+12,10,10,0);
     clr(c_white, hudAlpha);
     alg("center", fntPixelSmall);
     draw_text(qx+26,qy+6,number);
     alg();
     fnt(fntText);
                
        }     
     
     // Handle casting / item usage
     if (keyboard_check_pressed(97 + z))
        {
         if (hotslot[z, 2] &gt; 0 || hotslot[z, 1] == 2) 
            {
             if (hotslot[z, 1] == 2) {apiPlayerSpellCast(z);}  // Cast spell
             if (hotslot[z, 1] == 1) {inventoryAction(hotslot[z, 0], 0);}  // Use item
            }
        }
                        
     qx += 48;
    }
    
qx = 184 + view_xview + 4;
qy = 548 + view_yview - 36;
    
if (drawTip != -1) {if (mouse_check_button_released(mb_right)) {drawTip = -1;}}
if (drawTip != -1) {drawTipAlpha = lerp(drawTipAlpha, 1, 0.1);}
else               {drawTipAlpha = lerp(drawTipAlpha, 0, 0.1);}

if (drawTipAlpha &gt; 0.02)
   {
    spells = array_length_1d(oSpellMenu.spellUnlocked);
    tx = 0;
    
    for (i = 0; i &lt; spells; i++)
        {
         if (!oSpellMenu.spellUnlocked[i]) {continue;}
         
         clr(c_black, drawTipAlpha / 2 + spellAlpha[i]);
         draw_sprite_stretched(sSpells, oSpellMenu.spellDetails[i,2], qx + (tx * 48), qy, 32, 32);
         clr(c_black, drawTipAlpha);
         draw_circle(qx + (tx * 48) + 15, qy + 15, 16, true);
         
         
         if (mouse_in(qx + (tx * 48), qx + (tx * 48) + 32, qy, qy + 32))
            {
             if (drawTip != -1)
                {
                 spellAlpha[i] = lerp(spellAlpha[i], 0.5, 0.1);                   
                } 
             else {spellAlpha[i] = lerp(spellAlpha[i], 0, 0.1);}
             
             if (mouse_check_button_released(mb_right))
                {
                 hotslot[drawTipTempIndex, 1] = 2;                 
                 hotslot[drawTipTempIndex, 3] = oSpellMenu.spellSprite[tx];
                }          
            }
         else {spellAlpha[i] = lerp(spellAlpha[i], 0, 0.1);}
         tx++;
        }
   }

     // Navigation
     //********************************************************************
          
     // Quest
        if (keyboard_check_pressed(ord("Q")) &amp;&amp; iconActive[hudIcons.quest] &amp;&amp; !scrGettActiveComponent() &amp;&amp; !scrGetTempComponent())
        {
        draw_quest = ! draw_quest;
        if (instance_number(oQuest) &gt; 0) {oQuest.active = !oQuest.active;}
        
        if (draw_quest) {iconActive[hudIcons.status] = false; iconActive[hudIcons.inventory] = false;}
        else {iconActive[hudIcons.status] = true; iconActive[hudIcons.inventory] = true;}
        }
     // Crafting
        if (keyboard_check_pressed(ord("R")) &amp;&amp; iconActive[hudIcons.crafting] &amp;&amp; !scrGettActiveComponent())
        {
        draw_crafting = !draw_crafting;
        
        if (draw_crafting) {iconActive[hudIcons.equipment] = false;}
        else {iconActive[hudIcons.equipment] = true;}
        }        
     // Equipment
        if (keyboard_check_pressed(ord("E")) &amp;&amp; iconActive[hudIcons.equipment] &amp;&amp; !scrGettActiveComponent() &amp;&amp; !scrGetTempComponent())
        {
        draw_equipment = !draw_equipment;
        
        if (draw_equipment) {iconActive[hudIcons.crafting] = false;}
        else {iconActive[hudIcons.crafting] = true;}

        oInventory.draw_equipment = draw_equipment;
        }  
     // Status
        if (keyboard_check_pressed(ord("T")) &amp;&amp; iconActive[hudIcons.status] &amp;&amp; !scrGettActiveComponent())
        {
        draw_status = !draw_status;
        if (!draw_status) {with(oStatusMenu) {event_user(0);}}
        if (instance_number(oStatusMenu) &gt; 0) {oStatusMenu.activated = !oStatusMenu.activated;}
        }  
    // Bestiář   
     if (keyboard_check_pressed(ord("B")) &amp;&amp; iconActive[hudIcons.bestiary] &amp;&amp; !scrGettActiveComponent())
        {
        draw_bestiary = ! draw_bestiary;
        if (instance_number(oBestiar) &gt; 0) {oBestiar.activated = !oBestiar.activated;}
        }                  
        
// Draw crafting
if (draw_crafting) {scrCraftingDraw();}

// Reset temp component
tempComponent = false;
}
   
if (oPlayer.last_hp &lt;= 0) {die = true; oPlayer.can_move2 = false;}  
   
if (die)
    {
     var_vsync = false;
     die_alpha += 0.05;
     draw_set_color(c_black);
     draw_set_alpha(die_alpha);
     draw_rectangle(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview,0);        
     if (die_alpha &gt;= 1) {display_reset(0,!var_vsync); display_reset(0,var_vsync); game_restart();}
    }

/// Draw overlay
if (room == mapHouseAlice)
{
draw_set_blend_mode(bm_add);
draw_sprite(sRoomMask0, 0, 144, 16);
draw_set_blend_mode(bm_normal);
}
}
alg();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
