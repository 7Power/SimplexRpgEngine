<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!shader_is_compiled(shdr_shadows3D)) {
    show_message("shdr_shadows3d could not compile!")
    game_end()
}
if (!shader_is_compiled(shdr_shadows3D_shadowmap)) {
    show_message("shdr_shadows3d_shadowmap could not compile!")
    game_end()
}

// Start 3D
d3d_start()
d3d_set_hidden(true)
d3d_set_culling(true)
draw_set_font(fnt_demo)

// Set room size
room_xsize = 500
room_ysize = 500
room_zsize = 400
room_ambient_level = 0
menu_select = 0

// Start 3d shadows
shadows3D_init(640, 900, 600, obj_light)
shadows3D_create_light(room_xsize / 2, room_ysize / 2, room_zsize / 2, 1000, c_white)

// Camera
camera_x = room_xsize / 2
camera_y = room_ysize
camera_z = room_zsize - 50
camera_lookxy = 90
camera_lookz = -45

// Create models
model_init()
model_table = create_table()
model_torus_knot = d3d_model_create()
model_teapot = d3d_model_create()
model_bunny = d3d_model_create()
d3d_model_load(model_torus_knot, "torus_knot.d3d")
d3d_model_load(model_teapot, "teapot.d3d")
d3d_model_load(model_bunny, "bunny.d3d")
tex_bricks = background_get_texture(bg_bricks)
tex_wood = background_get_texture(bg_wood)
tex_orange = background_get_texture(bg_orange)

// Model properties
table_x = room_xsize / 2
table_y = room_ysize / 2
table_z = 0

bunny_x = 50
bunny_y = 50
bunny_z = 50
bunny_rotate = 0
bunny_rotation = 0

teapot_x = room_xsize / 2
teapot_y = room_ysize / 2
teapot_z = 114
teapot_rotate = 0
teapot_rotation = 0

torus_x = 400
torus_y = 400
torus_z = 200
torus_rotate = 0
torus_rotation = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Camera controls

if (mouse_check_button_pressed(mb_any)) {
    window_set_cursor(cr_none)
    display_mouse_set(window_get_x() + window_get_width() / 2, window_get_y() + window_get_height() / 2)
}

if (mouse_check_button(mb_any)) {
    var movespd, movex, movey, movez;
    movex = 0
    movey = 0
    movez = 0
    
    if (keyboard_check(ord("D"))) {
       movex = sin(degtorad(camera_lookxy)) * 3
       movey = cos(degtorad(camera_lookxy)) * 3
    }
    if (keyboard_check(ord("A"))) {
       movex = -sin(degtorad(camera_lookxy)) * 3
       movey = -cos(degtorad(camera_lookxy)) * 3
    }
    
    movespd = (keyboard_check(ord("W")) - keyboard_check(ord("S"))) * 3
    movex += lengthdir_x(movespd, camera_lookxy)
    movey += lengthdir_y(movespd, camera_lookxy)
    movez += (camera_lookz / 30) * movespd
    
    camera_x += movex
    camera_y += movey
    camera_z += movez

    camera_lookxy += (window_get_x() + window_get_width() / 2 - display_mouse_get_x()) / 8
    camera_lookz += (window_get_y() + window_get_height() / 2 - display_mouse_get_y()) / 8
    camera_lookz = clamp(camera_lookz, -89, 89)
    
    display_mouse_set(window_get_x() + window_get_width() / 2, window_get_y() + window_get_height() / 2)
} else {
    window_set_cursor(cr_default)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the scene with shadows, this script takes the drawing script (draw_scene) and projection
shadows3D_draw(draw_scene, camera_x, camera_y, camera_z,
    camera_x + cos(degtorad(camera_lookz)) * cos(degtorad(camera_lookxy)),
    camera_y - cos(degtorad(camera_lookz)) * sin(degtorad(camera_lookxy)),
    camera_z + sin(degtorad(camera_lookz)), 0, 0, 1, 90, view_wview / view_hview, 0.1, 10000)

// Menu
if (!mouse_check_button(mb_any)) {
    var movex, movey, movez, dx = 4, dy = 4, i, lights;
    draw_set_color(c_white)
    draw_text(dx, dy, "Point light shadows demo#Click+WASD: Move camera, Up/Down arrow key: Menu choice") dy += 15 * 2
    draw_set_color(test(menu_select = 0, c_yellow, c_gray))
    draw_text(dx, dy, "Room size: " + string(room_xsize) + "x" + string(room_ysize) + "x" + string(room_zsize) + ", Ambient level: " + string(room_ambient_level) + test(menu_select = 0, ", WASDQE: Resize, FV: Change ambient level", "")) dy += 15
    draw_set_color(test(menu_select = 1, c_yellow, c_gray))
    draw_text(dx, dy, "Bunny location: " + string(bunny_x) + "," + string(bunny_y) + "," + string(bunny_z) + test(menu_select = 1, ", WASDQE: Move, Space: Toggle rotate", "")) dy += 15
    draw_set_color(test(menu_select = 2, c_yellow, c_gray))
    draw_text(dx, dy, "Teapot location: " + string(teapot_x) + "," + string(teapot_y) + "," + string(teapot_z) + test(menu_select = 2, ", WASDQE: Move, Space: Toggle rotate", "")) dy += 15
    draw_set_color(test(menu_select = 3, c_yellow, c_gray))
    draw_text(dx, dy, "Torus location: " + string(torus_x) + "," + string(torus_y) + "," + string(torus_z) + test(menu_select = 3, ", WASDQE: Move, Space: Toggle rotate", "")) dy += 15
    draw_set_color(test(menu_select = 4, c_yellow, c_gray))
    draw_text(dx, dy, "Table location: " + string(table_x) + "," + string(table_y) + "," + string(table_z) + test(menu_select = 4, ", WASDQE: Move", "")) dy += 15
    lights = instance_number(obj_light)
    for (i = 0; i &lt; lights; i++) {
        var l = instance_find(obj_light, i)
        draw_set_color(test(obj_demo.menu_select = 5 + i, c_yellow, c_gray))
        draw_text(dx + 20, dy, "Light \#" + string(i + 1) + " location : " + string(l.x) + "," + string(l.y) + "," + string(l.z) +", range: " + string(l.range) + test(menu_select = 5 + i, ", WASDQE: Move, ZX: Change range, FV/GB/HN: Color (H/S/B), Backspace: Delete", ""))
        draw_set_color(l.color)
        draw_set_alpha(test(obj_demo.menu_select = 5 + i, 1, 0.25))
        draw_rectangle(dx, dy + 2, dx + 16, dy + 2 + 10, 0) dy += 15
        draw_set_alpha(1)
    }
    draw_set_color(test(menu_select = 5 + lights, c_yellow, c_gray))
    draw_text(dx, dy, test(menu_select = 5 + lights, "Space: New light","New light")) dy += 15
    
    menu_select += keyboard_check_pressed(vk_down) - keyboard_check_pressed(vk_up)
    if (menu_select &lt; 0) menu_select = 5 + lights
    if (menu_select &gt; 5 + lights) menu_select = 0
    movex = keyboard_check(ord("D")) - keyboard_check(ord("A"))
    movey = keyboard_check(ord("S")) - keyboard_check(ord("W"))
    movez = keyboard_check(ord("Q")) - keyboard_check(ord("E"))
    switch (menu_select) {
        case 0: { // Room
            room_xsize += movex * 5
            room_ysize += movey * 5
            room_zsize += movez * 5
            room_ambient_level += (keyboard_check(ord("F"))-keyboard_check(ord("V"))) * 0.01
            room_ambient_level = clamp(room_ambient_level, 0, 1)
            shadows3D_set_ambient(room_ambient_level)
            break
        }
        case 1: { // Bunny
            bunny_x += movex * 4
            bunny_y += movey * 4
            bunny_z += movez * 4
            if (keyboard_check_pressed(vk_space)) bunny_rotate = !bunny_rotate
            break
        }
        case 2: { // Teapot
            teapot_x += movex * 4
            teapot_y += movey * 4
            teapot_z += movez * 4
            if (keyboard_check_pressed(vk_space)) teapot_rotate = !teapot_rotate
            break
        }
        case 3: { // Torus
            torus_x += movex * 4
            torus_y += movey * 4
            torus_z += movez * 4
            if (keyboard_check_pressed(vk_space)) torus_rotate = !torus_rotate
            break
        }
        case 4: { // Table
            table_x += movex * 4
            table_y += movey * 4
            table_z += movez * 4
            break
        }
        default: { // Lights
            if (menu_select = 5 + lights) { // Add new light
                if (keyboard_check_pressed(vk_space)) {
                    shadows3D_create_light(
                        irandom_range(0, room_xsize),
                        irandom_range(0, room_ysize),
                        irandom_range(0, room_zsize),
                        1000,
                        random(c_white))
                }
            } else { // Change existing light
                var l = instance_find(obj_light, menu_select - 5), h, s, v;
                l.x += movex * 4
                l.y += movey * 4
                l.z += movez * 4
                
                l.range += (keyboard_check(ord("X")) - keyboard_check(ord("Z"))) * 20
                l.range = max(l.range, 0)
                
                h = color_get_hue(l.color) + (keyboard_check(ord("F"))-keyboard_check(ord("V"))) * 2
                s = color_get_saturation(l.color) + (keyboard_check(ord("G"))-keyboard_check(ord("B"))) * 2
                v = color_get_value(l.color) + (keyboard_check(ord("H"))-keyboard_check(ord("N"))) * 2
                l.color = make_color_hsv(h, s, v)
                
                if (keyboard_check_pressed(vk_backspace)) {
                    with (l) instance_destroy()
                }
            }
        }
    }
}

if (bunny_rotate) bunny_rotation++;
if (teapot_rotate) teapot_rotation++;
if (torus_rotate) torus_rotation++;

// FPS
window_set_caption("FPS: " + string(fps) + " (" + string(fps_real) + ")")
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
