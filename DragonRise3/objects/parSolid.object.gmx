<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game object transform properties

enum Transformations
{
none, scale, position
}

basicTransform       = Transformations.none;
basicTransformXScale = 1;
bacicTransformYScale = 1;
basicTransformAmt    = 0.2;

splashMessage      = "";
splashMessageTime  = -1;
splashMessageAlpha = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Basic transformations

if (basicTransform == Transformations.scale)
    {
     image_xscale = lerp(image_xscale, basicTransformXScale, basicTransformAmt);
     image_yscale = lerp(image_yscale, basicTransformYScale, basicTransformAmt); 
     
     if (image_xscale == basicTransformXScale &amp;&amp; image_yscale == basicTransformYScale)
        {
         basicTransform = Transformations.none;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Return player to previous position

with(other)
           {
            x = xprevious;
            y = yprevious;           
           }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle basic draw

if (splashMessageTime != -1 || splashMessageAlpha &gt; 0)
    {
    var xx,yy;
    xx = x;
    yy = y - sprite_get_height(sprite_index);
    parsedText = dialogueParse(splashMessage);
     
     if (splashMessageAlpha &lt; 1) {splashMessageAlpha = lerp(splashMessageAlpha, 1, splashMessageAlphaSpeed);}
     if (splashMessageTime &gt; 0) {splashMessageTime--;} else {splashMessageTime = -1; mood = "idle";}
     
     
draw_set_alpha(splashMessageAlpha/2);
draw_roundrect_colour_ext(xx - string_width(parsedText) / 2 - 10,yy - string_height(parsedText)/2,xx+string_width(parsedText)/2+10,yy+string_height(parsedText)/2+4,20,20,c_black,c_black,0);
draw_set_alpha(splashMessageAlpha);
draw_set_color(c_white);
draw_text_colored(xx-string_width(parsedText)/2,yy-string_height(parsedText)/2,splashMessage);
draw_set_alpha(1);
scrCenterText(0);
    }
if (splashMessageAlpha &gt; 0 &amp;&amp; splashMessageTime = -1 )
    {
     splashMessageAlpha -= 0.1;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
