<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEnemySlime</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>parEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise enemy
event_inherited();

scrEnemyIni(30,5,1,choose(1,1,2),"Slime",bestiaryEnemySlime,scrColorflag(c_blue) + "Slime" + scrEndColorflag());

timeToPerform = 0;
tempSpd = spd;
safeDying = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide
event_inherited();

if (mood = "jump") {randomize(); bonus_damage = 10; repeat(5) {instance_create(x-random(10)+random(10),y+random(10)-random(10),oBlob);}}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage player

// Fixed order: Collide -&gt; Apply affect(s) -&gt; Deal damage
scrEnemyCollision(other);
if (scrEnemyApplyAffect("poison", secToSteps(2), 0, c_red, 1, 20, true, 0, true))
    {
    stateAddEntry(coloredName + "tě otrávil!");
    }
scrEnemyDamage(oPlayer,15, coloredName + " ti způsobil [flagDamage] [flagPoints] poškození.");



if (mood = "jump")
   { 
    if (dir = dir_up) {dir = dir_down; y-= 4;}
    else if (dir = dir_down) {dir = dir_up; y += 4;}
    else if (dir = dir_right) {dir = dir_left; x -= 4;}
    else if (dir = dir_left) {dir = dir_right; x += 4;}
    mood = "jump";
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Special effects

if (slowdown &lt; 0.5)
{
randomize();

// jump
if (random(100) &gt; 80)
   {
     mood = "jump";
   }
else if (random(100) &gt; 80 &amp;&amp; mood = "attack")
   {
     mood = "slime";
   }
else if (random(100) &gt; 90 &amp;&amp; hp &lt; max_hp)
   {
     mood = "heal";
   }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Loot

if (drop)
{
scrEnemyLoot(oHealthDrop,1,5,1,40,5);
scrEnemyLoot(oXpDrop,10,12,1,70,5);
scrEnemyLoot(oGold,1,4,1,30,4);

scrEnemyDie(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self

if (timeline_running &amp;&amp; (timeline_position &gt; (timeline_max_moment(timeline_index) + global.cutsceneTime)))
    {
     timeline_running = false
     spd = tempSpd;
     //show_message("" + string(id) + ": Ukončuji cutscene" + "#Pozice: " + string(timeline_position) + " / " + string(timeline_max_moment(timeline_index)));
     //timeline_index = -1;
     timeline_position = 0;
    }
if (timeline_running)
    {
     draw_text(x, y - 32, "Cutscene"); // Debug
    }

if (z_mood = 2) {
zspeed = 0;
z = 0;
z_mood = 0;
 bonus_damage = 0;
 }
 

if (can_damage &gt; 0) {can_damage--;} else {can_damage = -1;}
if (last_hp &gt; hp) {last_hp--;}
if (last_hp &lt; hp) {last_hp++;}

if (last_hp &lt;= 0) {if (mood !="dying") {event_user(0);}}

if (mood == "cutscene" &amp;&amp; distance_to_point(cutsceneX, cutsceneY) &gt; 0)
{
if (dir = dir_right) {x += spd*(1-slowdown);}
if (dir = dir_left) {x -= spd*(1-slowdown);}
if (dir = dir_up) {y -= spd*(1-slowdown);}
if (dir = dir_down) {y += spd*(1-slowdown);}

}
else if (mood == "cutscene" &amp;&amp; distance_to_point(cutsceneX, cutsceneY) == 0)
    {
     mood = "idle";
    }
    
if (mood = "idle")
{
if (force_aggresive) {if (mood = "idle") {mood = "attack"; in_fight = 1;} if (force_timer &gt; 0) {force_timer--;} else {force_aggresive = 0; force_timer = 400;}}

if (dir = dir_right) {x += spd*(1-slowdown); count += spd*(1-slowdown); if (count &gt; 32) {count = 0;  event_user(2);scrEnemyGetPosition();}}
if (dir = dir_left) {x -= spd*(1-slowdown); count += spd*(1-slowdown); if (count &gt; 32) {count = 0;  event_user(2);scrEnemyGetPosition();}}
if (dir = dir_up) {y -= spd*(1-slowdown); count += spd*(1-slowdown); if (count &gt; 32) {count = 0; event_user(2); scrEnemyGetPosition();}}
if (dir = dir_down) {y += spd*(1-slowdown); count += spd*(1-slowdown); if (count &gt; 32) {count = 0; event_user(2); scrEnemyGetPosition();}}

}
if (mood = "attack")
{
in_fight = 1;
px = oPlayer.x;
py = oPlayer.y;


if (dir = dir_right) {if (can_damage = -1) {x += spd*(1-slowdown); count += spd*(1-slowdown)+0.2;} if (count &gt; 32) {count = 0; event_user(2); scrEnemyGetPositionAttack();}}
if (dir = dir_left) {if (can_damage = -1) {x -= spd*(1-slowdown); count += spd*(1-slowdown)+0.2;} if (count &gt; 32) {count = 0;  event_user(2);scrEnemyGetPositionAttack();}}
if (dir = dir_up) {if (can_damage = -1) {y -= spd*(1-slowdown); count += spd*(1-slowdown)+0.2;} if (count &gt; 32) {count = 0;  event_user(2);scrEnemyGetPositionAttack();}}
if (dir = dir_down) {if (can_damage = -1) {y += spd*(1-slowdown); count += spd*(1-slowdown)+0.2;} if (count &gt; 32) {count = 0;  event_user(2);scrEnemyGetPositionAttack();}}

}

if (mood = "dying")
{
if (safeDying) {safeDying = false; scrGoreExplodeDropShards(32, 8, spr[0]);}
draw_sprite_ext(spr[0],spr[1],x,y,1,1,0,c_white,image_alpha);
if (image_alpha &gt; 0) {image_alpha -= 0.02;} else {instance_destroy();}   
}

if (mood = "jump")
   {
   
   if (dir = dir_up)
   {
    if (z_mood = 0) {y -= z; z += 0.1; image_alpha -= 0.01 if (z &gt; 3) {z_mood = 1;}}
    if (z_mood = 1) {y -= z; z -= 0.1; image_alpha += 0.01 if (z &lt;= 0) {randomize(); z_mood = 2; repeat(5) {instance_create(x-random(10)+random(10),y+random(10)-random(10),oBlob);} mood = "idle";}}
   
   
    if (z_mood = 0 &amp;&amp; z &gt; 0)
     {
    draw_set_alpha(z/3);
    draw_sprite(sJump,0,x,y+z*4);
    draw_set_alpha(1);
    }
    if (z_mood = 1)
     {
    draw_set_alpha(abs(3-z)-0.2);
    draw_sprite(sJump,0,x,y+z*8);
    draw_set_alpha(1);
    }

   
   }
  else if (dir = dir_down)
   {
    if (z_mood = 0) {y += z; z += 0.1; image_alpha -= 0.01 if (z &gt; 3) {z_mood = 1;}}
    if (z_mood = 1) {y += z; z -= 0.1; image_alpha += 0.01 if (z &lt;= 0) {randomize(); z_mood = 2; repeat(5) {instance_create(x-random(10)+random(10),y+random(10)-random(10),oBlob);} mood = "idle";}}
   
   
    if (z_mood = 0)
     {
    draw_set_alpha(z/3);
    draw_sprite(sJump,0,x,y+z*8);
    draw_set_alpha(1);
    }
    if (z_mood = 1)
     {
    draw_set_alpha(z-2);
    draw_sprite(sJump,0,x,y+z*8);
    draw_set_alpha(1);
    }

   }
else if (dir = dir_right)
   {
    if (z_mood = 0) {x += z; z += 0.1; image_alpha -= 0.01 if (z &gt; 3) {z_mood = 1;}}
    if (z_mood = 1) {x += z; z -= 0.1; image_alpha += 0.01 if (z &lt;= 0) {randomize(); z_mood = 2; repeat(5) {instance_create(x-random(10)+random(10),y+random(10)-random(10),oBlob);} mood = "idle";}}
   
   
    if (z_mood = 0)
     {
    draw_set_alpha(z/3);
    draw_sprite(sJump,0,x,y+z*(8-z));
    draw_set_alpha(1);
    }
    if (z_mood = 1)
     {
    draw_set_alpha(z-2);
    draw_sprite(sJump,0,x,y+z*(8-z));
    draw_set_alpha(1);
    }

   }
  else if (dir = dir_left)
   {
    if (z_mood = 0) {x -= z; z += 0.1; image_alpha -= 0.01 if (z &gt; 3) {z_mood = 1;}}
    if (z_mood = 1) {x -= z; z -= 0.1; image_alpha += 0.01 if (z &lt;= 0) {randomize(); z_mood = 2; repeat(5) {instance_create(x-random(10)+random(10),y+random(10)-random(10),oBlob);} mood = "idle";}}
   
   
    if (z_mood = 0)
     {
    draw_set_alpha(z/3);
    draw_sprite(sJump,0,x,y+z*8);
    draw_set_alpha(1);
    }
    if (z_mood = 1)
     {
    draw_set_alpha(z-2);
    draw_sprite(sJump,0,x,y+z*8);
    draw_set_alpha(1);
    }

   }


    
    

   }

if (mood != "dying")
{
if (instance_number(oPlayer) &gt; 0)
   {
    if (distance_to_object(oPlayer) &lt; 64 &amp;&amp; mood = "idle")
       {
        mood = "attack";
       }
    if (distance_to_object(oPlayer) &gt; 196 &amp;&amp; mood != "idle" &amp;&amp; !force_aggresive)
       {
        in_fight = 0;
        mood = "idle";
       }

   }
   
if (in_fight)
   {
    if (health_alpha &lt; 1) {health_alpha += 0.05;}
   }
else {if (health_alpha &gt; 0) {health_alpha -= 0.05;}} 
  
if (health_alpha &gt; 0) 
   {
   draw_set_font(fntPixelSmall);
   
   if (scale &gt; 1) {scale -= 0.02;}
    draw_sprite_general(sHealthBar,1,0,0,40,8,x-18,y-20,1,1,0,c_white,c_white,c_white,c_white,health_alpha);
   draw_sprite_part_ext(sHealthBar,0,0,0,((last_hp/max_hp)*40),8,x-18,y-20,1,1,c_white,health_alpha);
   
   scrCenterText();
   draw_text_colour(x,y-30,name,c_black,c_black,c_black,c_black,health_alpha);
   scrCenterText(0);

      draw_text(x,y,string(hp)+string("#")+string(last_hp)+string("#")+string(max_hp)+string("#")+string(last_hp/max_hp));
  

   }
}   

if (mood != "dying" &amp;&amp; mood != "slime") 
   {
   if (p &lt; 10) {p += 0.2;} else {p = 0;}
  
   draw_self();   
   draw_sprite_ext(sXpPoint,p,x,y,1,1,0,c_aqua,0.6);

   }

if (mood = "slime")
   {
   if( shader_is_compiled(shdLerp) )
    {              
        shader_set(shdLerp);        
    

    var s = sin( degtorad(lerp_value) );
        lerp_value+=5;
        if( lerp_value&gt;180 ) 
            {            
            lerp_value=0;
            
                for(i = 0; i &lt; 360; i += 90)        
                  {
                   inst = instance_create(x,y,oSlimePart);
                   inst.direction = i;
                  }
                  mood = "idle";

            }
        // lerp to WHITE (1,1,1)
        shader_set_uniform_f(colour_to_find, 1,1,1, s );       
        draw_sprite(sprite_index,image_index,x, y);          
         shader_reset();
     }
 
      
   }   
if (mood = "heal")
   {
   if( shader_is_compiled(shdLerp) )
    {              
        shader_set(shdLerp);        
    

    var s = sin( degtorad(lerp_value) );
        lerp_value+=5;
        if( lerp_value&gt;180 ) 
            {            
            lerp_value=0;
            hp += irandom_range(3,5);
            scrBasicEffect();
                  mood = "idle";

            }
        // lerp to GREEN (0,1,0)
        shader_set_uniform_f(colour_to_find, 0,1,0, s );       
        draw_sprite(sprite_index,image_index,x, y);          
         shader_reset();
     }
 
      
   }   

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
