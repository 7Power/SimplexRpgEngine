<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up

activated           = false;
activatedAlpha      = 0;
itemsPerPage        = 16;
pages               = ceil(upgradableProperties / itemsPerPage);
currentPage         = 0;
selectedSkillsIndex = 1;
skillsIndexMax      = 5;


skillIndexName[1] = "Řemesla";
skillIndexName[2] = "Výřečnost";
skillIndexName[3] = "Čarodějnictví";
skillIndexName[4] = "Zlodějina";
skillIndexName[5] = "Zbraně";

xoffset = 10;
yoffset = 0;

for(i = 0; i &lt; celkem_vlastnosti; i++)
    {
     propertyColor[i] = c_white;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self
 
// Temp vars
xx   = view_xview;
yy   = view_yview + 32;
ti   = 0;
hint = "";

// Lerp main alpha channel
if (activated) {activatedAlpha = lerp(activatedAlpha, 1, 0.1);}
else           {activatedAlpha = lerp(activatedAlpha, 0, 0.1);}

// Draw form
if (activatedAlpha &gt; 0.01)
{
fnt();
clr(c_black, activatedAlpha / 2);
draw_rectangle(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, false);
clr(c_white, activatedAlpha)

// Draw overall header
fnt(fntPixelHuge);
draw_text_colored(view_xview + 5, view_yview, "Lord of Flies, úroveň " + scrColorflag(c_lime) + string(oPlayer.vlastnost[vlastnost_level]) + scrEndColorflag() + " "); 
fnt();

// Draw attributes
propertyPointsText = "";
if (oPlayer.skillPoints &gt; 0) {propertyPointsText = "(" + scrColorflag(c_lime) + "+" + string(oPlayer.skillPoints) + scrEndColorflag() + ")";}
draw_text_colored(xx + xoffset, yy + yoffset, "Vlastnosti " + propertyPointsText);
clr(c_white, activatedAlpha / 2);
draw_line(xx + xoffset, yy + yoffset + 24, xx + xoffset + 220, yy + yoffset + 24);
clr(c_white, activatedAlpha)

tempY = 32;
for (i = 0; i &lt; celkem_vlastnosti; i++)  
    {
     // If searched property is defined in player's properties and it's a basic property
     if (apiPlayerGetProperty(i)) 
        {
         if (returnedArray[2] == 0 &amp;&amp; returnedArray[1])
         {
          draw_text_colored(xx + xoffset, yy + yoffset + tempY, returnedArray[0] + ": " + scrColorflag(propertyColor[i]) + string(oPlayer.vlastnost[i]) + scrEndColorflag() + " ");
          
          // If player have some points to spend
          if (oPlayer.skillPoints &gt; 0) 
              {
               color = c_white;
               if (mouse_in(xx + xoffset + 192, xx + xoffset + 200 + 16, yy + yoffset + tempY, yy + yoffset + tempY + 24))
                   {
                    color = c_lime;
                    hint = returnedArray[3];
                    
                    // Assign point to property on click
                    if (mouse_check_button_pressed(mb_left))
                        {
                         oPlayer.skillPoints--;
                         oPlayer.vlastnost[i]++;
                         audio_play_sound(sndSkillUp, 0, false);
                        }
                   }
                   
               draw_text_colour(xx + xoffset + 200, yy + yoffset + tempY, "+", color, color, color, color, draw_get_alpha());
               
              }
              
          tempY += 32;
         }
        }
        
     ti++; // Normalized interated index
    } 
    
// Draw hint
if (hint != "")
    {
     fnt(fntPixelSmall);
     draw_text_colored(xx + xoffset, yy + yoffset + tempY, hint);
    }

// Draw skills form
fnt();
xx   = view_xview + 300;
yy   = view_yview + 32;
ti   = 0;
hint = "";

// Skills header
propertyPointsText = "";
if (oPlayer.propertyPoints &gt; 0) {propertyPointsText = "(" + scrColorflag(c_lime) + "+" + string(oPlayer.propertyPoints) + scrEndColorflag() + ")";}
draw_text_colored(xx + xoffset, yy + yoffset, "Dovednosti " + propertyPointsText);
clr(c_white, activatedAlpha / 2);
draw_line(xx + xoffset, yy + yoffset + 24, xx + xoffset + 220, yy + yoffset + 24);
clr(c_white, activatedAlpha)
fnt();

// Skills navigation
c1 = c_white;
c2 = c_white;

// Back item navigation
if (mouse_in(xx + xoffset - 8, xx + xoffset + 8, yy + yoffset + 28, yy + yoffset + 56))
    {
     c1 = c_lime;
     
     if (mouse_check_button_pressed(mb_left))
        {
         if (selectedSkillsIndex &gt; 1) 
            {
             selectedSkillsIndex--;
             audio_play_sound(sndMenuClick1, 0, false);
            }
        }
    }
// Next item navigation
if (mouse_in(xx + xoffset + 202, xx + xoffset + 232, yy + yoffset + 28, yy + yoffset + 56))
    {
     c2 = c_lime;
     
     if (mouse_check_button_pressed(mb_left))
        {
         if (selectedSkillsIndex &lt; skillsIndexMax) 
            {
             selectedSkillsIndex++;
             audio_play_sound(sndMenuClick1, 0, false);
            }
        }
    }
    
tempText = skillIndexName[selectedSkillsIndex];
draw_text(xx + xoffset + ((220 - string_width(tempText)) / 2), yy + yoffset + 32, tempText);
draw_text_colour(xx + xoffset, yy + yoffset + 32, "&lt;", c1, c1, c1, c1, draw_get_alpha()); 
draw_text_colour(xx + xoffset + 210, yy + yoffset + 32, "&gt;", c2, c2, c2, c2, draw_get_alpha()); 
  
tempY = 64;
for (i = 0; i &lt; celkem_vlastnosti; i++)  
    {
     // If searched property is defined in player's properties and it's a basic property
     if (apiPlayerGetProperty(i)) 
        {
         if (returnedArray[2] == selectedSkillsIndex &amp;&amp; returnedArray[1])
         {
          draw_text_colored(xx + xoffset, yy + yoffset + tempY, returnedArray[0] + ": " + scrColorflag(propertyColor[i]) + string(oPlayer.vlastnost[i]) + scrEndColorflag() + " ");
          
          // If player have some points to spend
          if (oPlayer.propertyPoints &gt; 0) 
              {
               color = c_white;
               if (mouse_in(xx + xoffset + 192, xx + xoffset + 200 + 16, yy + yoffset + tempY, yy + yoffset + tempY + 24))
                   {
                    color = c_lime;
                    hint = returnedArray[3];
                    
                    // Assign point to property on click
                    if (mouse_check_button_pressed(mb_left))
                        {
                         oPlayer.propertyPoints--;
                         oPlayer.vlastnost[i]++;
                         audio_play_sound(sndSkillUp, 0, false);
                        }
                   }
                   
               draw_text_colour(xx + xoffset + 200, yy + yoffset + tempY, "+", color, color, color, color, draw_get_alpha());
               
              }
              
          tempY += 32;
         }
        }
        
     ti++; // Normalized interated index
    }
    
// Now draw player's status
fnt();
xx   = view_xview;
yy   = view_yview + 380;
ti   = 0;

draw_text_colored(xx + xoffset, yy + yoffset, "Status");
clr(c_white, activatedAlpha / 2);
draw_line(xx + xoffset, yy + yoffset + 24, xx + xoffset + 220, yy + yoffset + 24);
clr(c_white, activatedAlpha)
fnt();

draw_text_colored(xx + xoffset, yy + yoffset + 32, "Zdraví: " + string(round(oPlayer.vlastnost[vlastnost_zivot])) + " / " + string(oPlayer.vlastnost[vlastnost_max_zivot]));
draw_text_colored(xx + xoffset, yy + yoffset + 64, "Mana: " + string(round(oPlayer.vlastnost[vlastnost_mana])) + " / " + string(oPlayer.vlastnost[vlastnost_max_mana]));
draw_text_colored(xx + xoffset, yy + yoffset + 96, "Štít: " + string(round(oPlayer.vlastnost[vlastnost_stit])) + " / " + string(oPlayer.vlastnost[vlastnost_max_stit]));
draw_text_colored(xx + xoffset, yy + yoffset + 128, "Stamina: " + string(round(oPlayer.vlastnost[vlastnost_stamina])) + " / " + string(oPlayer.vlastnost[vlastnost_max_stamina]));

// Lastly player's resistances
fnt();
xx   = view_xview + 300;
yy   = view_yview + 380;
ti   = 0;

draw_text_colored(xx + xoffset, yy + yoffset, "Odolnosti");
clr(c_white, activatedAlpha / 2);
draw_line(xx + xoffset, yy + yoffset + 24, xx + xoffset + 220, yy + yoffset + 24);
clr(c_white, activatedAlpha)

fnt(fntPixelSmall);
tempY = 32;
for (i = 0; i &lt; celkem_vlastnosti; i++)  
    {
     // If searched property is defined in player's properties and it's a basic property
     if (apiPlayerGetProperty(i)) 
        {
         if (returnedArray[2] == 666 &amp;&amp; !returnedArray[1])
         {
          draw_text_colored(xx + xoffset, yy + yoffset + tempY, returnedArray[0] + ": " + scrColorflag(propertyColor[i]) + string(oPlayer.vlastnost[i]) + scrEndColorflag() + " ");
          tempY += 22;
         }
        }
        
     ti++; // Normalized interated index
    } 
    
fnt();
clr();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
