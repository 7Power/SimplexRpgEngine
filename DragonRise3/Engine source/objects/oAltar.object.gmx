<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sAltar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up

event_inherited();
image_speed = 0;

// Prepare collision mask
collMask              = instance_create(x - 32, y + 32, oCollisionMask);
collMask.idd          = (id);
collMask.type         = "altar";
collMask.image_xscale = 2;
collMask.dir          = "w";
collMask.open_char    = "E";

unlocked    = false;
interacting = false;
animate     = 0;
open        = false;

textAlpha = 0;
text = false;
activateText = "Oltář vypadá sešle. V prohlubni chybí nějaký disk";
interactionText = "E";
canBeActivatedText = "Mám chybějící disk" + scrColorText("(E - aktivovat)", c_yellow);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle logic

draw_self();

if (!unlocked)
    {
     if (text)
        {
         textAlpha = lin(textAlpha, 1, 0.05);
        }
     else 
        {
         textAlpha = lin(textAlpha, 0, -0.05);
        }
     
     if (textAlpha &gt; 0.02)
        {
         if (!interacting) {tempText = interactionText;}
         else 
            {
             if (inventoryNumber(itemEnum.itemRelic) &gt; 0) {tempText = canBeActivatedText;}
             else {tempText = activateText;}
            }
            
                 
       //  alg("center", fntPixel);
         fnt(fntPixel);
         v = string_width(dialogueParse(tempText));  
         clr(c_black, (textAlpha / 2));
         draw_roundrect_colour_ext(x - (v / 2) - 10, y - string_height(tempText) / 2 - 32, (x + (v / 2) + 10), (y + (string_height(tempText) / 2) + 4 - 32), 20, 20, c_black, c_black, false);
         clr(c_white, textAlpha);
         draw_text_colored(x - (v / 2), (y - 32), tempText);
         clr();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
