<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-12</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init and call db of enemies

//scrBestiaryInit();
event_user(0);

xOffset = 256;
drawX = 0;
activated = false;

currentPage = 0;
entriesPerPage = 4;

pageName[0] = "Hvozdy holohlav";

for (i = 0; i &lt; (array_length_1d(pageName) * entriesPerPage); i++)
    {
     entryAlpha[i] = 1;
     entryX[i]     = x;
     entryY[i]     = y;
    }

entryActive = -2;
hoverA = 0;
mode   = 0;
rectangleHeight = -1;
textAlpha = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Documentation
/*


Important arrays
  - unlocked[n,m] (bool) [Checks if target enemy m is unlocked in bestiary page n]
  - monster[n,bestiary_] (int [C]) [Informations about enemy (sprite,name,text...)] 
  - title[n] (string) [Page title, fe. "Brave mountains"]
  
Important vars
  -       
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemies DB
 
for(i = 0; i &lt; 64; i++)
    {
     unlocked[i] = 0;
    }
      
monster[bestiaryEnemySlime,bestiary_monster_title]      = "Slimák rosolovitý";
monster[bestiaryEnemySlime,bestiary_monster_text]       = "Tichý obyvatel temných, lesních#zákoutí. Nesnáší světlo.";
monster[bestiaryEnemySlime,bestiary_monster_sprite]     = sEnemySlime;
monster[bestiaryEnemySlime,bestiary_monster_details]    = "Lorem Ipsum" + scrColorflag(c_red) + " dolor sit amet" +scrEndColorflag() + "#consectetur adipiscing elit";
monster[bestiaryEnemySlime,bestiary_monster_race]       = "Divoké zvíře";

monster[bestiaryEnemySlime2,bestiary_monster_title]      = "Slimák stínobrodý";
monster[bestiaryEnemySlime2,bestiary_monster_text]       = "Tichý obyvatel temných lesních#zákoutí. Nesnáší světlo.";
monster[bestiaryEnemySlime2,bestiary_monster_sprite]     = sEnemySlime;
monster[bestiaryEnemySlime2,bestiary_monster_details]    = "Lorem Ipsum" + scrColorflag(c_red) + " dolor sit amet" +scrEndColorflag() + "#consectetur adipiscing elit";
monster[bestiaryEnemySlime2,bestiary_monster_race]       = "Divoké zvíře";

monster[bestiaryEnemySlime,bestiary_monster_killed] = 10;
unlocked[0] = 1;

monster[bestiaryEnemySlime2,bestiary_monster_killed] = 100;
unlocked[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw bestiary

//scrBestiaryDraw();

x = view_xview + 800;
y = view_yview + 150;

// Computations
nX    = (x - drawX);
nY    = y;
pages = array_length_1d(pageName);

// Temp vars
hover = false;

// Horizontal movement
if (activated) {if (drawX &lt; xOffset) {drawX = lerp(drawX, xOffset + 8, 0.05);}}
else {if (drawX &gt; 0) {drawX = lerp(drawX, -8, 0.05);}}

// Draw header 
clr();
draw_sprite(sBestiar, 0, nX, y);
draw_sprite(sBestiar, 2, nX, y);

alg("center", fntPixelHuge);
clr(c_white);
draw_text(nX + 128, y + 16, pageName[currentPage]);
alg("center", fntPixelSmall);
draw_text(nX + 128, y + 36, "strana " +string(currentPage + 1) + " / " + string(pages));

// paginace [TODO]

// Draw monsters
tempI = 0;
for (i = (currentPage * entriesPerPage); i &lt; (((currentPage * entriesPerPage)) + entriesPerPage); i++)
    {
     // Compute [x,y] of drawn entries
     if (entryActive != i)
        {
        entryX[i] = nX;
        entryY[i] = ((y + 4) + (48 + (tempI * (66))));
        tempEntryY[i] = entryY[i];
        }
     else
        {
        // Animation UP
        if (mode == 0)
        {
        entryX[i] = nX;
        entryY[i] = ((y + 4) + (48 + (tempI * (66))) - shiftY);
        
        for (j = 0; j &lt; (((currentPage * entriesPerPage)) + entriesPerPage); j++)
        {
        if (j == entryActive) {continue;}
        entryAlpha[j] = lerp(entryAlpha[j], 0, 0.1);
        if (entryActive == 0) {entryAlpha[j] = 0;}
        }
        

        
        if (shiftY &lt; (66*entryActive) - 2) {shiftY = lerp(shiftY, (66*entryActive), 0.1);}
        else
            {
             mode            = 1;
             shiftY          = (66*entryActive);             
             rectangleHeight = 0;
            }
        }
        // Animation DETAILS DOWN
        if (mode == 1)
        {
        entryX[i] = nX;
        entryY[i] = ((y + 4) + (48 + (tempI * (66))) - shiftY);
        
        if (rectangleHeight &lt; (256 - 50)) {rectangleHeight = lerp(rectangleHeight, 256 - 48, 0.1);}
        else {mode = 2;}
        }
        
        // Animation TEXT UP
        if (mode == 2)
        {
        entryX[i] = nX;
        entryY[i] = ((y + 4) + (48 + (tempI * (66))) - shiftY);
 
        if (textAlpha &lt; 1) {textAlpha = lerp(textAlpha, 1.1, 0.1);}
        else {mode = 3;}
       
        }
        
        // Animation WAIT FOR CLOSE
        if (mode == 3)
        {
        entryX[i] = nX;
        entryY[i] = ((y + 4) + (48 + (tempI * (66))) - shiftY);
        
        
        }
        
        // Animation TEXT DISSAPEAR
        if (mode == 4)
        {
        entryX[i] = nX;
        entryY[i] = ((y + 4) + (48 + (tempI * (66))) - shiftY);
        
        if (textAlpha &gt; 0) {textAlpha = lerp(textAlpha, -0.1, 0.1);}
        else {mode = 5;}
        
        textAlpha = max(textAlpha, 0);
        } 

        // Animation DETAILS OFF
        if (mode == 5)
        {
        entryX[i] = nX;
        entryY[i] = ((y + 4) + (48 + (tempI * (66))) - shiftY);
        
        if (rectangleHeight &gt; 0) {rectangleHeight = lerp(rectangleHeight, -4, 0.1);}
        else {mode = 6;}
        
        rectngleHeight = max(rectangleHeight, 0);
        
        } 
        
        // Animation END
        if (mode == 6)
        {
        entryX[i] = nX;
        entryY[i] = ((y + 4) + (48 + (tempI * (66))) - shiftY);
        
        for (j = 0; j &lt; (((currentPage * entriesPerPage)) + entriesPerPage); j++)
        {
        if (j == entryActive) {continue;}
        entryAlpha[j] = lerp(entryAlpha[j], 1, 0.1);
        if (entryActive == 0) {entryAlpha[j] = 1;}
        }
              
        if (shiftY &gt; 0) {shiftY = lerp(shiftY, 0, 0.1);}
        else
            {
             mode            = 0;
             entryActive     = -2;
            }
        }             
        }
     // tempVars
     drawName = "??????";
     drawRace = "??????";
     drawN    = "";
     
        
     // Draw frame
     clr(c_black, entryAlpha[i]);
     draw_sprite(sBestiar, 1, entryX[i], entryY[i]);
     
     if (unlocked[i]) 
        {
        draw_sprite(monster[i, bestiary_monster_sprite], 0, entryX[i] + 32, entryY[i] + 32); 
        drawName = monster[i, bestiary_monster_title];
        drawRace = monster[i, bestiary_monster_race];
        drawN    = "Poraženo: " + string(monster[i, bestiary_monster_killed]);
        
        if (rectangleHeight != -1 &amp;&amp; i == entryActive)
            {
             draw_sprite_part(sBestiar, 5, 0, 0, 256, rectangleHeight, entryX[i], entryY[i] + 64);
            
             alg();
             clr(c_white, textAlpha);
             draw_set_font(fntPixelSmall);
             draw_text_colored(entryX[i] + 16, entryY[i] + 70, monster[i, bestiary_monster_text]);
             q = string_height(monster[i, bestiary_monster_text]);
             draw_set_font(fntPixelTiny);
             draw_text_colored(entryX[i] + 16, entryY[i] + 78 + q, monster[i, bestiary_monster_details]);
             
             }
        }
     alg();
     draw_set_font(fntPixel);
     clr(c_white, entryAlpha[i]);
     draw_text(entryX[i] + 72, entryY[i] + 4, drawName);
     clr(c_ltgray, entryAlpha[i]);
     draw_text(entryX[i] + 72, entryY[i] + 20, drawRace);
     draw_set_font(fntPixelSmall);
     clr(c_black, entryAlpha[i]);
     draw_text(entryX[i] + 72, entryY[i] + 40, drawN);
     
     if (mouse_in(entryX[i], entryX[i] + 256, entryY[i], entryY[i] + 64) &amp;&amp; entryAlpha[i] &gt;= 1)
        {
         hover = true;
         draw_sprite_ext(sBestiar, 7, entryX[i], entryY[i], 1, 1, 0, c_red, hoverA);
       
         if (mouse_check_button_pressed(mb_left) &amp;&amp; entryActive == -2)
            {
             entryActive = i;
             shiftY = 0;
             shiftMaxY = 0;
             mode = 0;
            }
         if (mouse_check_button_pressed(mb_left) &amp;&amp; mode == 3)
            {
             mode = 4;
            }
        } 

     tempI++;
    }

if (hover) {if (hoverA &lt; 0.5) {hoverA = lerp(hoverA, 0.5, 0.1);}}
else {if (hoverA &gt; 0) {hoverA = 0;}}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
