<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-14</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up

draw            = 1;
alpha[0]        = 0;
alpha[1]        = 0;
alpha[2]        = 0;
alpha[3]        = 0;
die             = 0;
die_alpha       = 0;
effect_scale    = 1;
draw_bestiary   = 0;
temp_inv        = 0;
temp_inv2       = 0;
draw_stats      = 0;
stats_alpha     = 0;
draw_quest      = 0;
effect_scale2   = 1;
skillPointsA    = 0.5;
skillPointsM    = 0;
Sname           = part_system_create();
ticks           = 0;
maxTicks        = 30;
draw_crafting   = 0;
scale_crafting  = 1;
draw_equipment  = 0;
scale_equipment = 1;
draw_status     = 0;
scale_status    = 1;
spellsxPlus     = 16;
expxPlus        = 8;
craftingHelper  = -1;
craftingTitle   = "Výroba";
craftingMenuAlpha = 1;
craftingMenuIndex[0] = "Vytvořit předmět";
craftingMenuIndex[1] = "Vylepšit předmět";
craftingMenuIndex[2] = "Zušlechtit materiál";
craftingTitleHelper = "";

drawCraftingMenu = 1;
craftingSelectedIndex = -1;
selectedIndexY = -1;
craftingPageSelected = 0;
craftingKnownItems = ds_list_create();
craftingItemsNewFlag[0, 48] = false;
craftingEntriesPerPage = 48;
craftingEntriesPerRow  = 8;
craftingItemsSprite[0, 48] = 0;
craftingItemsName[0, 48] = "";
craftingSelectedItem = -1;
craftingDetails = false;
craftingDetailsHeight = 0;
craftingDetailsAlpha = 0;
craftingSlot[10, 5] = 0;
craftingDetailsText[0, 48] = "";
craftingTitleHelper2 = "";

craftingSlotFree[10] = true;
craftingSlotSprite[10] = -1;
craftingSlotID[10] = 0;
craftingSlotItemID[10] = -1;
craftingSlotNumber[10] = -1;

upgradingItemID = -1;
upgradingItemSprite = 0;
upgradingItemSlotID = -1;
// TEST
craftingItemsSprite[0, 3] = 3; // Wooden sword
scrCraftingSetItemKnown(3, "Dřevěný meč", "Poškození: " + scrColorflag(c_lime) + "5" + scrEndColorflag() + " - " + scrColorflag(c_lime) + "8#" + scrEndColorflag() + "Stamina na úder: " + scrColorflag(c_red) + "4 " + scrEndColorflag() + "- " + scrColorflag(c_red) + "5#");


iconActive[hudIcons.bestiary]  = true;
iconActive[hudIcons.inventory] = true;
iconActive[hudIcons.quest]     = true;
iconActive[hudIcons.crafting]  = false;
iconActive[hudIcons.equipment] = false;
iconActive[hudIcons.status]    = true;

iconAlpha[hudIcons.bestiary]  = 1;
iconAlpha[hudIcons.inventory] = 1;
iconAlpha[hudIcons.quest]     = 1;
iconAlpha[hudIcons.crafting]  = 0.6;
iconAlpha[hudIcons.equipment] = 0.6;
iconAlpha[hudIcons.status]    = 1;

normalxoffset = (view_wview - 800);
halfxoffset   = (normalxoffset / 2)
spellsxPlus  += halfxoffset;
yoffset       = (view_hview - 600);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy PSystem

part_system_destroy(Sname);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump to player position

if (instance_number(oPlayer) &gt; 0) {x = oPlayer.x; y = oPlayer.y;}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw HUD

x = view_xview;
y = view_yview;

if (instance_number(oPlayer) &gt; 0 &amp;&amp; draw)
{
  
scrAffectsUpdate();      
clr(c_black, 0.3);
//draw_rectangle(x, y + 552, x + 700, y + 600, false);
clr();   
   
oPlayer.vlastnost[vlastnost_zivot] = min(max(0,oPlayer.vlastnost[vlastnost_zivot]),oPlayer.vlastnost[vlastnost_max_zivot]);
oPlayer.vlastnost[vlastnost_mana] = min(max(0,oPlayer.vlastnost[vlastnost_mana]),oPlayer.vlastnost[vlastnost_max_mana]);
oPlayer.vlastnost[vlastnost_stamina] = min(max(0,oPlayer.vlastnost[vlastnost_stamina]),oPlayer.vlastnost[vlastnost_max_stamina]);
oPlayer.vlastnost[vlastnost_stit] = min(max(0,oPlayer.vlastnost[vlastnost_stit]),oPlayer.vlastnost[vlastnost_max_stit]);

   
     scrCenterText();
     draw_set_colour(c_black);
     draw_set_font(fntPixelSmall);
     
     // Zivot
     draw_sprite(sHUDBars,10,x+600+normalxoffset,y);
     if (oPlayer.vlastnost[vlastnost_max_zivot] &gt; 0)
     {
     if (oPlayer.last_hp &lt; 0) {oPlayer.last_hp = 0;}
     draw_sprite_part(sHudBarsSubs,1,0,0,oPlayer.last_hp / oPlayer.vlastnost[vlastnost_max_zivot] * sprite_get_width(sHudBarsSubs),sprite_get_height(sHudBarsSubs),x+628+normalxoffset,y+4);
     }
     draw_sprite(sHUDBars,2,x+600+normalxoffset,y);
     draw_text(x+710+normalxoffset,y+12,round(oPlayer.last_hp));
     
     draw_set_font(fntPixelTiny);
     draw_set_alpha(alpha[0]);
     draw_rectangle_colour(x+600+normalxoffset,y,x+627+normalxoffset,y+23,c_white,c_white,c_white,c_white,0);
     draw_set_alpha(alpha[0] * 2);
     draw_text(x+615+normalxoffset,y+12,round(oPlayer.vlastnost[vlastnost_max_zivot]));
     draw_set_alpha(1);
     draw_set_font(fntPixelSmall);
     if (mouse_in(x+600+normalxoffset,x+627+normalxoffset,y,y+23)) {if (alpha[0] &lt; 0.7) {alpha[0] += 0.05;}} else {if (alpha[0] &gt; 0) {alpha[0] -= 0.05;}}
     
     
     // Stit
     draw_sprite(sHUDBars,4,x+600+normalxoffset,y+30);
     draw_sprite(sHUDBars,11,x+600+normalxoffset,y+30);
     if (oPlayer.vlastnost[vlastnost_max_stit] &gt; 0)
     {
     draw_sprite_part(sHudBarsSubs,2,0,0,oPlayer.last_stit / oPlayer.vlastnost[vlastnost_max_stit] * sprite_get_width(sHudBarsSubs),sprite_get_height(sHudBarsSubs),x+628+normalxoffset,y+34);
     }
     draw_text(x+710+normalxoffset,y+42,round(oPlayer.last_stit));
     
     draw_set_font(fntPixelTiny);
     draw_set_alpha(alpha[1]);
     draw_rectangle_colour(x+600+normalxoffset,y+30,x+627+normalxoffset,y+53,c_white,c_white,c_white,c_white,0);
     draw_set_alpha(alpha[1] * 2);
     draw_text(x+615+normalxoffset,y+42,round(oPlayer.vlastnost[vlastnost_max_stit]));
     draw_set_alpha(1);
     draw_set_font(fntPixelSmall);
     if (mouse_in(x+600+normalxoffset,x+627+normalxoffset,y+30,y+53)) {if (alpha[1] &lt; 0.7) {alpha[1] += 0.05;}} else {if (alpha[1] &gt; 0) {alpha[1] -= 0.05;}}


     // Mana
     draw_sprite(sHUDBars,0,x+600+normalxoffset,y+60);
     draw_sprite(sHUDBars,9,x+600+normalxoffset,y+60);
     if (oPlayer.vlastnost[vlastnost_max_mana] &gt; 0)
     {
     draw_sprite_part(sHudBarsSubs,0,0,0,oPlayer.last_mana / oPlayer.vlastnost[vlastnost_max_mana] * sprite_get_width(sHudBarsSubs),sprite_get_height(sHudBarsSubs),x+628+normalxoffset,y+64);
     }
     draw_text(x+710+normalxoffset,y+72,round(oPlayer.last_mana));
     
     draw_set_font(fntPixelTiny);
     draw_set_alpha(alpha[2]);
     draw_rectangle_colour(x+600+normalxoffset,y+60,x+627+normalxoffset,y+83,c_white,c_white,c_white,c_white,0);
     draw_set_alpha(alpha[2] * 2);
     draw_text(x+615+normalxoffset,y+72,round(oPlayer.vlastnost[vlastnost_max_mana]));
     draw_set_alpha(1);
     draw_set_font(fntPixelSmall);
     if (mouse_in(x+600+normalxoffset,x+627+normalxoffset,y+60,y+83)) {if (alpha[2] &lt; 0.7) {alpha[2] += 0.05;}} else {if (alpha[2] &gt; 0) {alpha[2] -= 0.05;}}


     // Stamina
     draw_sprite(sHUDBars,6,x+600+normalxoffset,y+90);
     draw_sprite(sHUDBars,12,x+600+normalxoffset,y+90);
     if (oPlayer.vlastnost[vlastnost_max_stamina] &gt; 0)
     {
     draw_sprite_part(sHudBarsSubs,3,0,0,oPlayer.last_stamina / oPlayer.vlastnost[vlastnost_max_stamina] * sprite_get_width(sHudBarsSubs),sprite_get_height(sHudBarsSubs),x+628+normalxoffset,y+94);
     }
     draw_text(x+710+normalxoffset,y+102,round(oPlayer.last_stamina));

     draw_set_font(fntPixelTiny);
     draw_set_alpha(alpha[3]);
     draw_rectangle_colour(x+600+normalxoffset,y+90,x+627+normalxoffset,y+113,c_white,c_white,c_white,c_white,0);
     draw_set_alpha(alpha[3] * 2);
     draw_text(x+615+normalxoffset,y+102,round(oPlayer.vlastnost[vlastnost_max_stamina]));
     draw_set_alpha(1);
     draw_set_font(fntPixelSmall);
     if (mouse_in(x+600+normalxoffset,x+627+normalxoffset,y+90,y+113)) {if (alpha[3] &lt; 0.7) {alpha[3] += 0.05;}} else {if (alpha[3] &gt; 0) {alpha[3] -= 0.05;}}
 
        
     draw_sprite(sExperienceBarSubs,0,x+275+spellsxPlus,y+571+yoffset);
     draw_sprite_part(sExperienceBarSubs,1,0,0,oPlayer.last_xp / oPlayer.vlastnost[vlastnost_max_zkusenosti] * sprite_get_width(sExperienceBarSubs),sprite_get_height(sExperienceBarSubs),x+275+spellsxPlus,y+571+yoffset);
     draw_sprite(sExperienceBar,0,x+244+spellsxPlus,y+560+yoffset);
     
     clr();
     alg("center", fntPixelSmall);
     draw_text(x+394+spellsxPlus,y+560+yoffset,string(oPlayer.last_xp)+" / "+string(oPlayer.vlastnost[vlastnost_max_zkusenosti]));
     alg("center", fntPixel);
     if (oPlayer.talentPoints == 0) {draw_text(x+260+spellsxPlus,y+574+yoffset,string(oPlayer.vlastnost[vlastnost_level]));}
     else {draw_text(x+260+spellsxPlus,y+574+yoffset,"+" + string(oPlayer.talentPoints))}
     alg();
     
     if (oPlayer.talentPoints &gt; 0)
        {
         if (skillPointsM = 0)
            {
             if (skillPointsA &lt; 1)  {skillPointsA += 0.02;} else {skillPointsM = 1;}
            }
         if (skillPointsM = 1)
            {
             if (skillPointsA &gt; 0.5)  {skillPointsA -= 0.02;} else {skillPointsM = 0;}
            }
          
           draw_sprite_ext(sExperienceBar, 1, x+244+spellsxPlus, y+560+yoffset, 1, 1 , 0, c_white, skillPointsA);                 
        }
     if (mouse_check_button_pressed(mb_left) &amp;&amp; point_in_circle(x+260+spellsxPlus, y+576+yoffset, mouse_x, mouse_y, 16))
        {
         if (oTalentMenu.mode = "") {oTalentMenu.mode = "in"; oTalentMenu.draw = true;}
        }

     
     scrCenterText(0);

       
       draw_set_font(fntPixelHuge);
       draw_sprite(sSpellsUI,0,x+540+spellsxPlus,y+560+yoffset);
       if (oPlayer.spell[0] = "")
       {
       draw_set_alpha(0.4);
       draw_text(x+551+spellsxPlus,y+562+yoffset,"J");
       draw_set_alpha(1);
       }
       else 
            {
            draw_sprite(oPlayer.spell_sprite[0],0,x+540+spellsxPlus,y+560+yoffset);              
            draw_set_alpha(0.4);
            if (oPlayer.spell_cd[0] &gt; 0) {draw_rectangle_cd(x+540+3+spellsxPlus,y+560+3+yoffset,x+572+spellsxPlus,y+592+yoffset,360-((oPlayer.spell_cd[0] / oPlayer.temp_cd[0])*360))}
            draw_set_alpha(1);           
            draw_sprite(sSpellsUI,1,x+540+spellsxPlus,y+560+yoffset); 
            draw_set_font(fntPixelSmall);  
            draw_text_colour(x+559+spellsxPlus,y+572+yoffset,"J",c_black,c_black,c_black,c_black,1); 
            draw_text_colour(x+560+spellsxPlus,y+572+yoffset,"J",c_white,c_white,c_white,c_white,1);  
            draw_set_font(fntPixelHuge);
            }
       draw_sprite(sSpellsUI,0,x+584+spellsxPlus,y+560+yoffset);
       if (oPlayer.spell[1] = "")
       {
        draw_set_alpha(0.4);
       draw_text(x+595+spellsxPlus,y+562+yoffset,"K");
       draw_set_alpha(1);
       }
       else 
            {
            draw_sprite(oPlayer.spell_sprite[1],0,x+584+spellsxPlus,y+560+yoffset); 
            draw_set_alpha(0.4);
            if (oPlayer.spell_cd[1] &gt; 0) {draw_rectangle_cd(x+584+3+spellsxPlus,y+560+3+yoffset,x+616+spellsxPlus,y+592+yoffset,360-((oPlayer.spell_cd[1] / oPlayer.temp_cd[1])*360))}
            draw_set_alpha(1);           
            draw_sprite(sSpellsUI,1,x+584+spellsxPlus,y+560+yoffset);
            draw_set_font(fntPixelSmall);  
            draw_text_colour(x+602+spellsxPlus,y+572+yoffset,"K",c_black,c_black,c_black,c_black,1); 
            draw_text_colour(x+603+spellsxPlus,y+572+yoffset,"K",c_white,c_white,c_white,c_white,1);  
            draw_set_font(fntPixelHuge);

            }
       draw_sprite(sSpellsUI,0,x+628+spellsxPlus,y+560+yoffset);
       if (oPlayer.spell[2] = "")
       {
        draw_set_alpha(0.4);
       draw_text(x+640+spellsxPlus,y+561+yoffset,"L");
       draw_set_alpha(1);
       }
       else 
            {
            draw_sprite(oPlayer.spell_sprite[2],0,x+628+spellsxPlus,y+560+yoffset);  
            draw_set_alpha(0.4);
            if (oPlayer.spell_cd[2] &gt; 0) {draw_rectangle_cd(x+628+3+spellsxPlus,y+560+3+yoffset,x+660+spellsxPlus,y+592+yoffset,360-((oPlayer.spell_cd[2] / oPlayer.temp_cd[2])*360))}
            draw_set_alpha(1);     
            draw_sprite(sSpellsUI,1,x+628+spellsxPlus,y+560+yoffset);
             draw_set_font(fntPixelSmall);  
            draw_text_colour(x+645+spellsxPlus,y+572+yoffset,"L",c_black,c_black,c_black,c_black,1); 
            draw_text_colour(x+646+spellsxPlus,y+572+yoffset,"L",c_white,c_white,c_white,c_white,1);  
            draw_set_font(fntPixelHuge);

            }

       
     // Black outline alpha UP
     if (effect_scale2   &lt; 1.2 &amp;&amp; draw_quest)     {effect_scale2   += 0.02;}          
     if (effect_scale    &lt; 1.2 &amp;&amp; draw_bestiary)  {effect_scale    += 0.02;}
     if (scale_crafting  &lt; 1.2 &amp;&amp; draw_crafting)  {scale_crafting  += 0.02;}
     if (scale_equipment &lt; 1.2 &amp;&amp; draw_equipment) {scale_equipment += 0.02;}
     if (scale_status    &lt; 1.2 &amp;&amp; draw_status)    {scale_status    += 0.02;}
 
     // Draw outline
     tempAlpha = min(0.7, iconAlpha[hudIcons.bestiary]);
     if (iconAlpha[hudIcons.bestiary] &lt; 1) {tempAlpha = 0;}
     draw_sprite_ext(sBestiary,0,view_xview+8+16,view_yview+560+16+yoffset,effect_scale,effect_scale,0,c_black,tempAlpha);
     tempAlpha = min(0.7, iconAlpha[hudIcons.crafting]);
     if (iconAlpha[hudIcons.crafting]  &lt; 1) {tempAlpha = 0;}
     draw_sprite_ext(sCrafting,0,view_xview+16+128,view_yview+560+16+yoffset,scale_crafting,scale_crafting,0,c_black,tempAlpha);
     tempAlpha = min(0.7, iconAlpha[hudIcons.equipment]);
     if (iconAlpha[hudIcons.equipment]  &lt; 1) {tempAlpha = 0;}
     draw_sprite_ext(sEquipment,0,view_xview+24+128+32,view_yview+560+16+yoffset,scale_equipment,scale_equipment,0,c_black,tempAlpha);
     tempAlpha = min(0.7, iconAlpha[hudIcons.status]);
     if (iconAlpha[hudIcons.status]  &lt; 1) {tempAlpha = 0;}
     draw_sprite_ext(sStatus,0,view_xview+32+128+64,view_yview+560+16+yoffset,scale_status,scale_status,0,c_black,tempAlpha);
     tempAlpha = min(0.7, iconAlpha[hudIcons.quest]);
     if (iconAlpha[hudIcons.quest]  &lt; 1) {tempAlpha = 0;}
     draw_sprite_ext(sQuestIcon,0,view_xview+96+8,view_yview+560+16+yoffset,effect_scale2,effect_scale2,0,c_black,tempAlpha);

     
     // Draw full icons
     draw_sprite_ext(sBestiary,  0, (view_xview + 24 ), (view_yview + 576 + yoffset), iconAlpha[hudIcons.bestiary],  iconAlpha[hudIcons.bestiary],  0, c_white, iconAlpha[hudIcons.bestiary]);
     draw_sprite_ext(sCrafting,  0, (view_xview + 144), (view_yview + 576 + yoffset), iconAlpha[hudIcons.crafting],  iconAlpha[hudIcons.crafting],  0, c_white, iconAlpha[hudIcons.crafting]);
     draw_sprite_ext(sEquipment, 0, (view_xview + 184), (view_yview + 576 + yoffset), iconAlpha[hudIcons.equipment], iconAlpha[hudIcons.equipment], 0, c_white, iconAlpha[hudIcons.equipment]);
     draw_sprite_ext(sStatus,    0, (view_xview + 224), (view_yview + 576 + yoffset), iconAlpha[hudIcons.status],    iconAlpha[hudIcons.status],    0, c_white, iconAlpha[hudIcons.status]);
     draw_sprite_ext(sQuestIcon, 0, (view_xview + 104), (view_yview + 576 + yoffset), iconAlpha[hudIcons.quest],     iconAlpha[hudIcons.quest],     0, c_white, iconAlpha[hudIcons.quest]);

     // Adjust full icons alpha
     for (i = 0; i &lt; array_length_1d(iconAlpha); i++)
        {
        if (iconAlpha[i] &lt; 1   &amp;&amp; iconActive[i])  {iconAlpha[i] = lerp(iconAlpha[i], 1.02, 0.05);}   // Increase
        if (iconAlpha[i] &gt; 0.6 &amp;&amp; !iconActive[i]) {iconAlpha[i] = lerp(iconAlpha[i], 0.61, 0.05);} // Decrease
        }
 
     // Black outline alpha DOWN
     if (effect_scale    &gt; 1 &amp;&amp; !draw_bestiary)  {effect_scale    -= 0.02;}
     if (scale_crafting  &gt; 1 &amp;&amp; !draw_crafting)  {scale_crafting  -= 0.02;}
     if (scale_equipment &gt; 1 &amp;&amp; !draw_equipment) {scale_equipment -= 0.02;}
     if (scale_status    &gt; 1 &amp;&amp; !draw_status)    {scale_status    -= 0.02;}
     if (effect_scale2   &gt; 1 &amp;&amp; !draw_quest)     {effect_scale2   -= 0.02;}

     // [TODO] Temp - Player gold
     draw_set_font(fntPixel);
     draw_text(view_xview+200,y+570,string(oPlayer.gold));
     
     // Navigation
     //********************************************************************
     
     // Quest
        if (keyboard_check_pressed(ord("Q")) &amp;&amp; iconActive[hudIcons.quest])
        {
        draw_quest = ! draw_quest;
        if (instance_number(oQuest) &gt; 0) {oQuest.active = !oQuest.active;}
        
        if (draw_quest) {iconActive[hudIcons.status] = false; iconActive[hudIcons.inventory] = false;}
        else {iconActive[hudIcons.status] = true; iconActive[hudIcons.inventory] = true;}
        }
     // Crafting
        if (keyboard_check_pressed(ord("R")) &amp;&amp; iconActive[hudIcons.crafting])
        {
        draw_crafting = !draw_crafting;
        
        if (draw_crafting) {iconActive[hudIcons.equipment] = false;}
        else {iconActive[hudIcons.equipment] = true;}
        }        
     // Equipment
        if (keyboard_check_pressed(ord("E")) &amp;&amp; iconActive[hudIcons.equipment])
        {
        draw_equipment = !draw_equipment;
        
        if (draw_equipment) {iconActive[hudIcons.crafting] = false;}
        else {iconActive[hudIcons.crafting] = true;}

        oInventory.draw_equipment = draw_equipment;
        }  
     // Status
        if (keyboard_check_pressed(ord("T")) &amp;&amp; iconActive[hudIcons.status])
        {
        draw_status = !draw_status;
        }  
    // Bestiář   
     if (keyboard_check_pressed(ord("B")) &amp;&amp; iconActive[hudIcons.bestiary])
        {
        draw_bestiary = ! draw_bestiary;
        if (instance_number(oBestiar) &gt; 0) {oBestiar.activated = !oBestiar.activated;}
        }                  
        
// Draw crafting
if (draw_crafting) {scrCraftingDraw();}

}
   
if (oPlayer.last_hp &lt;= 0) { die = 1; oPlayer.can_move2 = 0;}     
if (die)
{
        die_alpha += 0.05;
        draw_set_color(c_black);
        draw_set_alpha(die_alpha);
        draw_rectangle(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview,0);
        
        if (die_alpha &gt;= 1) {game_restart();}
       }
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
