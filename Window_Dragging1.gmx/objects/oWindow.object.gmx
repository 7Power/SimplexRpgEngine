<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise the virtual window

// options
change_cursor = true;
close_button = true;
maximise_button = true;
resize_enable = true;
drag_enable = true;


// colours
normal_colour = $66AE66;
selected_colour = $335733; 
close_button_colour = $0e00F4;
close_button_colour_selected = $0e00A3;
maximise_button_colour = $00F0FF;
maximise_button_colour_selected = $00a0a0;

// frame sizes
titlebarheight = 20;
thickness = 3;
resize_width = 7;
resize_height = 7;
button_size = 14;

// state
mouse_x_start=-1;
mouse_y_start=-1;
mouse_x_last = -1;
mouse_y_last = -1;
delta_x = 0;
delta_y = 0;

// selections
selected = false;
moving = false;
resizing = false;
closing = false;
closing_over=false;
maximise = false;
maximise_over=false;
maximised = false;
window_details[0]=0;        // x
window_details[0]=0;        // y
window_details[0]=0;        // w
window_details[0]=0;        // h


// debug
coverage_area[0]=0;
coverage_area[1]=0;
coverage_area[2]=0;
coverage_area[3]=0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check the mosue to GML window

/// get the window width for THIS frame
window_width = display_get_gui_width();
window_height = display_get_gui_height();


var wx1 = window_get_x();
var wy1 = window_get_y();
var wx2 = wx1+window_width;
var wy2 = wy1+window_height;
mx = display_mouse_get_x();
my = display_mouse_get_y();

var rx1 = wx2 - resize_width;
var ry1 = wy2 - resize_height;

var cx1 = wx1+window_width;
var cy1 = wy1+((titlebarheight-button_size)&gt;&gt;1);
var cy2 = cy1+button_size;
var cx2=0,mx1=0,mx2=0;

if( close_button ){
    cx1 = cx1-button_size-thickness-1;
    cx2 = cx1+button_size;
}
if( maximise_button ){
    mx1 = cx1-button_size-thickness-1;
    mx2 = mx1+button_size;
}




// First check to see if we're selecting the window border 
if( mouse_check_button(mb_left) )
{
    if(!selected){
        // Close button
        if((close_button==true) &amp;&amp; (( mx&gt;=cx1 ) &amp;&amp; ( mx&lt;cx2 )) &amp;&amp; (( my&gt;=cy1 ) &amp;&amp; ( my&lt;cy2))){
            selected=true;
            closing=true;
            closing_over=true;
        }
        // Maximise button
        else if((maximise_button==true) &amp;&amp; (( mx&gt;=mx1 ) &amp;&amp; ( mx&lt;mx2 )) &amp;&amp; (( my&gt;=cy1 ) &amp;&amp; ( my&lt;cy2))){
            selected=true;
            maximise=true;
            maximise_over=true;
        }        
        // Window title-bar
        else if( (drag_enable==true)&amp;&amp;( (( mx&gt;=wx1 ) &amp;&amp; ( mx&lt;wx2 )) &amp;&amp; (( my&gt;=wy1 ) &amp;&amp; ( my&lt;(wy1+titlebarheight))) )){
            selected=true;
            mouse_x_start = mx;             // get start position 
            mouse_y_start = my;
            mouse_x_last = mx;
            mouse_y_last = my;
            delta_x = mouse_x_start - wx1;  // get delta from origin to mouse
            delta_y = mouse_y_start - wy1;
            moving=true;
        }
        // resize corner
        else if((resize_enable==true) &amp;&amp; ( (( mx&gt;=rx1 ) &amp;&amp; ( mx&lt;wx2 )) &amp;&amp; (( my&gt;=ry1 ) &amp;&amp; ( my&lt;wy2)))  ){
            selected=true;
            mouse_x_start = mx;             // get start position 
            mouse_y_start = my;
            mouse_x_last = mx;
            mouse_y_last = my;
            delta_x = window_width;  // get delta from origin to mouse
            delta_y = window_height;
            resizing=true;
        }  
        
    }else{
        if(closing){
            if( (( mx&gt;=cx1 ) &amp;&amp; ( mx&lt;cx2 )) &amp;&amp; (( my&gt;=cy1 ) &amp;&amp; ( my&lt;cy2)) ){
                closing_over=true;
            }else{
                closing_over=false;
            }
        }
        if(maximise){
            if( (( mx&gt;=mx1 ) &amp;&amp; ( mx&lt;mx2 )) &amp;&amp; (( my&gt;=cy1 ) &amp;&amp; ( my&lt;cy2)) ){
                maximise_over=true;
            }else{
                maximise_over=false;
            }
        }
        else if( moving ){
            if( mouse_x_last!=mx || mouse_y_last != my ){
                if( maximised ){
                    // center the title bar around the mouses current location, and get new delta on the window once it's restored
                    delta_x = mouse_x_start - (mouse_x_start-(window_details[2]&gt;&gt;1));
                    // restore the window
                    window_set_rectangle(mouse_x_start+(mx-mouse_x_start)-delta_x, mouse_y_start+(my-mouse_y_start)-delta_y,window_details[2],window_details[3]);
                    maximised=false;
                }else{
                    // manually move the window around
                    window_set_position( mouse_x_start+(mx-mouse_x_start)-delta_x, mouse_y_start+(my-mouse_y_start)-delta_y);
                }
            }        
        }
        else if( resizing ){
            if( mouse_x_last!=mx || mouse_y_last != my ){
                window_set_size( (delta_x+(mx-mouse_x_start))&amp;~1, (delta_y+(my-mouse_y_start))&amp;~1 );
            }        
        }
        mouse_x_last = mx;
        mouse_y_last = my;
    }
}else{
    // on mouse up, finish up and release everything!
    if( resizing ){
        // Could resize views and application_surface here....
    }
    if(closing_over){
        // if closing, then restore the cursor, and shut down...
        window_set_cursor(cr_default);
        game_end();
    }
    if( maximise_over ){
        // check for maximise - or restore.
        if( !maximised ){
            window_details[0]=wx1;
            window_details[1]=wy1;
            window_details[2]=window_width;
            window_details[3]=window_height;
            maximised=true;
            MaximiseWindow();
        }else{
            window_set_rectangle(window_details[0],window_details[1],window_details[2],window_details[3]);
            maximised=false;
        }
        maximise_over=false;
    }

    
    // release eveything    
    selected=false;
    moving=false;
    resizing=false;
    closing=false;
    maximise=false;
}


// Change cursor on resize?
if( change_cursor ){
    if( resize_enable ){
        if( ( (( mx&gt;=rx1 ) &amp;&amp; ( mx&lt;wx2 )) &amp;&amp; (( my&gt;=ry1 ) &amp;&amp; ( my&lt;wy2))) || (resizing) ){
            window_set_cursor(cr_size_nwse);
        }else{
            window_set_cursor(cr_default);
        }
    }


}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the window frame...

// use the whole display...
display_set_gui_size(-1, -1);
display_set_gui_maximise(1, 1, 0, 0);


// draw the window...
var title="w="+string(window_width)+",  h="+string(window_height);
DrawWindowBorder(window_width,window_height, title);

display_set_gui_maximise(-1, -1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
