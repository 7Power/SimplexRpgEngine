<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-12</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

questListTitle     = ds_list_create();
questListText      = ds_list_create();
questListReward    = ds_list_create();
questListCompleted = ds_list_create();
questListID        = ds_list_create();
questListPrefix    = ds_list_create();

active         = false;
activeAlpha    = 0;
entriesPerPage = 5;
page           = 0;
questActiveID  = -1;


tY     = 0;
tempYY = 0;
tA     = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Documentation
/*


Important arrays
  - unlocked[n,m] (bool) [Checks if target enemy m is unlocked in bestiary page n]
  - monster[n,bestiary_] (int [C]) [Informations about enemy (sprite,name,text...)] 
  - title[n] (string) [Page title, fe. "Brave mountains"]
  
Important vars
  -       
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw quest
xx = view_xview;
yy = view_yview;
//tempYY = 0;
qY = 0;

clr();
draw_set_font(fntPixel);

if (active)
    {
     if (activeAlpha &lt; 1) {activeAlpha = lerp(activeAlpha, 1, 0.1);}
     entries = ds_list_size(questListID);
     doDraw = true;
     
     for (i = page*entriesPerPage; i &lt; min(entries, (page*entriesPerPage)+entriesPerPage); i++)
        {
         doInc = true;
         a = 0.4;
         tempID    = ds_list_find_value(oQuest.questListID, i);
         tempY     = yy-view_yview;
         if (questActiveID != -1) {}
         if (i !=  min(entries, (page*entriesPerPage)+entriesPerPage)) {qY += string_height(string(questListTitle[| i])) + 16;}

         if (mouse_x &gt; xx &amp;&amp; mouse_x &lt; xx + 512 &amp;&amp; mouse_y &gt; yy &amp;&amp; mouse_y &lt; yy + string_height(string(questListTitle[| i])))
            {
             a = 0.8;
             if (mouse_check_button_pressed(mb_left))
                {
                 tempYY   = (string_height(string(questListTitle[| i])) + 16 + string_height(string(questListText[| i])));
                 tY = 0;
                 if (questActiveID = -1 || questActiveID != tempID) {questActiveID = tempID;}
                 else {questActiveID = -1;}
                 doDraw = false;
                 
                }
              if (mouse_check_button_pressed(mb_right))
                {
                 scrQuestEntryRemove(tempID); 
                 tY = 0;            
                }
            } 
         clr(c_white, a);
         draw_rectangle(xx, yy, xx + 512, real(yy) + string_height(string(questListTitle[| i])), 0); 
         clr();
         markDone = "";
         normalizedI = (i - min(entries, (page*entriesPerPage)));
         
         if (questListCompleted[| i] == true) { markDone = "" + scrColorflag(c_lime) + " (Splněno)" + scrEndColorflag();}
         draw_text_colored(xx + 4, yy, questListPrefix[| i] + " " + questListTitle[| i] + string(markDone));
         yy += (string_height(questListTitle[| i]) + 8);
         
          if (questActiveID == tempID &amp;&amp; doInc &amp;&amp; doDraw)
          {
           doInc = false;
           
    
           
           if (yy-view_yview &lt;= tempYY-tY+24 + normalizedI*30) 
           {
           tY = lerp(tY,tempYY-tY+50,0.1);
           yy += tY;        
           clr(c_white,0.2);
           draw_rectangle(xx,normalizedI*31+24+view_yview,xx+512,yy-1,0);
           clr();
           zY = (yy + normalizedI + 3);
           }
           else
            {
            clr(c_white,0.2);
            draw_rectangle(xx,normalizedI*31+24+view_yview,xx+512,zY,0);
            clr();
             draw_text_colored(xx, yy, questListTitle[| i]);
             yy += real(string_height(questListTitle[| questActiveID]) + 16);
             draw_set_font(fntPixelSmall);    
             draw_text_colored(xx, yy, questListText[| questActiveID]);   
             yy +=  + string_height(questListText[| questActiveID])
             draw_set_font(fntPixel);
            }   
                 
          }
          
          
        }
             clr(c_white, 0.4);
             draw_rectangle(xx, yy, xx + 512, real(yy) + 32, 0); 
             clr();
             draw_text(xx, yy, "Strana " + string(page+1) + " / " + string(floor(entries/entriesPerPage)+1) + ", " + string(entries) + " úkolů aktivních.");
             
             if (floor(entries/entriesPerPage) &gt; 0)
                {
                 draw_rectangle(xx+416, yy, xx+464, yy+32,1);
                 draw_rectangle(xx+464, yy, xx+512, yy+32,1);

                 if (mouse_x &gt; xx + 416 &amp;&amp; mouse_x &lt; xx + 464 &amp;&amp; mouse_y &gt; yy &amp;&amp; mouse_y &lt; yy + 32)
                    {
                     if (mouse_check_button_pressed(mb_left))
                        {
                        if (page &gt; 0) {page--;}
                        }
                    }
                  if (mouse_x &gt; xx + 464 &amp;&amp; mouse_x &lt; xx + 512 &amp;&amp; mouse_y &gt; yy &amp;&amp; mouse_y &lt; yy + 32)
                    {
                     if (mouse_check_button_pressed(mb_left))
                        {
                        if (page &lt; floor(entries/entriesPerPage)) {page++;}
                        }
                    }
                 
                }        
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
