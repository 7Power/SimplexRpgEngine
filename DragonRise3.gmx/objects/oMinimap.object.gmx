<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x1=0
y1=0
x2=room_width
y2=room_height
//these set the bounding box for the view of the mimap.
//if x1 and y1 are 0
//and x2 and y2 are the room's size, the minimap will show every object in the room
height=100
width=100
//this is the height  and width of the minimap
var lenx,leny;
//these are used in the calculations of the position to draw the objects
lenx=x2-x1
leny=y2-y1
//lengths
sizex=width/lenx
sizey=height/leny
draw = 0;
alpha = 0;

zoom_x = room_width;
zoom_y = room_height;
zoom_level = 1;
m_alpha = 1;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(oPlayer) &gt; 0) {x = oPlayer.x; y = oPlayer.y;}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x1=0
y1=0
x2=zoom_x;
y2=zoom_y;
m_alpha = 1;
//draw = 0 // debug

x = view_xview+(800-width);
y = view_yview+(600-height);

/*
if (mouse_check_button_pressed(mb_left) &amp;&amp; mouse_in(view_xview+(800-width),view_yview+(600-height),view_xview+(800),y+height))
{
show_message("Minimap zoom");

 if (zoom_level &lt; 3) 
 {
 zoom_level++;
 zoom_x -= 100;
 zoom_y -= 75;

 } else {zoom_level = 1; zoom_x = 800; zoom_y = 600;}

}
*/
if (instance_number(oPlayer) &gt; 0)
{ 
if (oPlayer.can_move2)
{

if (keyboard_check_pressed(ord("M"))) {draw = !draw;}
}

}
if (instance_number(oPlayer) &gt; 0 &amp;&amp; draw) {
//to move into view if your view follows a player or something
m_alpha = 1;

//multiplications &lt;1
//draw_set_circle_precision(8) //64
draw_set_alpha(0.3)
draw_set_color(c_green)
draw_rectangle(x,y,x+width,y+height,0)
draw_set_color(c_black)
draw_set_alpha(1)
draw_rectangle(x,y,x+width-1,y+height-1,1)
draw_set_color(c_aqua)
//draw_set_circle_precision(64) //64

with (oPlayer)
{
if x&gt;oMinimap.x1//if obect is inside the boxed area (set in the create)
if y&gt;oMinimap.y1
if x&lt;oMinimap.x2
if y&lt;oMinimap.y2
draw_circle(oMinimap.x+((x-oMinimap.x1)*oMinimap.sizex),oMinimap.y+((y-oMinimap.y1)*oMinimap.sizey),2,false)


}
with (oEnemySlime)
{
if x&gt;oMinimap.x1//if obect is inside the boxed area (set in the create)
if y&gt;oMinimap.y1
if x&lt;oMinimap.x2
if y&lt;oMinimap.y2
if distance_to_object(oPlayer) &lt; 500
{

m_alpha = 5-(distance_to_object(oPlayer)/100)
draw_set_alpha(m_alpha);
draw_circle_colour(oMinimap.x+((x-oMinimap.x1)*oMinimap.sizex),oMinimap.y+((y-oMinimap.y1)*oMinimap.sizey),2,c_red,c_red,false)
draw_set_alpha(1);

}
}
//draw_set_color(c_);
with (parTree)
{
if x&gt;oMinimap.x1//if obect is inside the boxed area (set in the create)
if y&gt;oMinimap.y1
if x&lt;oMinimap.x2
if y&lt;oMinimap.y2
if distance_to_object(oPlayer) &lt; 500
{
m_alpha = 5-(distance_to_object(oPlayer)/100)
draw_set_alpha(m_alpha);
draw_rectangle_colour(oMinimap.x+((x-oMinimap.x1)*oMinimap.sizex),oMinimap.y+((y-oMinimap.y1)*oMinimap.sizey),oMinimap.x+((x-oMinimap.x1)*oMinimap.sizex)+4,oMinimap.y+((y-oMinimap.y1)*oMinimap.sizey)+4,m_color,m_color,m_color,m_color,0)
draw_set_alpha(1);

}
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
