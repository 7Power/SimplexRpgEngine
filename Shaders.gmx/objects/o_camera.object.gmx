<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>80</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_reset(8, false)

//-------------------------Initialize mouse control
mousecontrol_init()
//-------------------------Initialize camera
camera_init()
d3d_start()
d3d_set_culling(false)
draw_set_color(c_white)

//-------------------------Initiate the planets
i = 0
dist[i] = 0
rad[i] = 80
spd[i] = 0.1

i = 1
rad[i] = 15
spd[i] = 1
dist[i] = dist[i - 1] + rad[i - 1] + rad[i] + 80

i = 2
rad[i] = 40
spd[i] = 0.6
dist[i] = dist[i - 1] + rad[i - 1] + rad[i] + 20

i = 3
rad[i] = 40
spd[i] = 0.5
dist[i] = dist[i - 1] + rad[i - 1] + rad[i] + 20

i = 4
rad[i] = 20
spd[i] = 0.4
dist[i] = dist[i - 1] + rad[i - 1] + rad[i] + 60

i = 5
rad[i] = 200
spd[i] = 0.3
dist[i] = dist[i - 1] + rad[i - 1] + rad[i] + 500

//-------------------------Create planet circles
circles = d3d_model_create()
for (i = 0; i &lt; 6; i ++)
{
    d3d_model_primitive_begin(circles, pr_linestrip)
    for (d = 0; d &lt;= 2 * pi; d += pi / 20)
    {
        d3d_model_vertex(circles, cos(d) * dist[i], sin(d) * dist[i], 0)
    }
    d3d_model_primitive_end(circles)
}

nmSampler = shader_get_sampler_index(sh_normalmap, "s_normalmap")
lightPos = shader_get_uniform(sh_normalmap, "lightPos")
cslightPos = shader_get_uniform(sh_celshading, "lightPos")
celSample = shader_get_sampler_index(sh_celshading, "celShadingSample")
toonSample = shader_get_sampler_index(sh_toon, "celShadingSample")


lightX = 0
lightY = 0
lightZ = 0
prevLightX = 0
prevLightY = 0
prevLightZ = 0

//Create models
modelTorus = d3d_model_create()  model_add_torus(modelTorus, 1, 2, 20, 1, 1)
toonTortoise = toon_create_tortoise()

shader[0] = sh_rimlighting
shaderName[0] = "Rim lighting"
shader[1] = sh_spheremap
shaderName[1] = "Spherical environment mapping"
shader[2] = sh_normalmap
shaderName[2] = "Unfinished attempt at normal maps with rim lighting"
shader[3] = sh_celshading
shaderName[3] = "Cel shading"
shader[4] = sh_outline
shaderName[4] = "Outline"
shader[5] = sh_toon
shaderName[5] = "Toon shader"
shaders = 6
currentShader = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//-------------------------Move camera based on mouse movements
camera_update()

lightSpdX = lightX - prevLightX
lightSpdY = lightY - prevLightY
lightSpdZ = lightZ - prevLightZ
prevLightX = lightX
prevLightY = lightY
prevLightZ = lightZ
lightX += 1 - random(2) + lightSpdX * 0.99 - lightX / 10000
lightY += 1 - random(2) + lightSpdY * 0.99 - lightY / 10000
lightZ += 1 - random(2) + lightSpdZ * 0.99 - lightZ / 10000
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black)
draw_text(10, 10, "Current shader: " + shaderName[currentShader])
draw_text(10, 30, "Press space to switch shader. Made by TheSnidr")
draw_text(10, 50, "FPS: " + string(fps) + "/ " + string(room_speed))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_set_projection_ext(x, y, z, x + xto, y + yto, z + zto, xup, yup, zup, 60, view_wview / view_hview, 1, 32000)

draw_set_color(c_white)
d3d_set_zwriteenable(false)
d3d_transform_set_scaling(10, 10, 10)
d3d_transform_add_translation(x, y, z)
d3d_draw_ellipsoid(-1, -1, -1, 1, 1, 1, sprite_get_texture(tex_background, 0), 1, 1, 50)
d3d_set_zwriteenable(true)
d3d_transform_set_identity()
d3d_model_draw(circles, 0, 0, 0, -1)

d3d_transform_set_rotation_x(50)
d3d_set_culling(false)
for (i = 0; i &lt; 6; i ++)
{
    xx = dist[i] * cos(current_time / 1000 * spd[i])
    yy = dist[i] * sin(current_time / 1000 * spd[i])
    zz = 0
    d3d_transform_set_scaling(rad[i], rad[i], rad[i])
    d3d_transform_add_rotation_z(current_time / 5 * spd[i])
    d3d_transform_add_rotation_x(current_time / 3 * spd[i])
    d3d_transform_add_rotation_y(current_time / 8 * spd[i])
    d3d_transform_add_translation(xx, yy, zz)
    
    shader_set(shader[currentShader])
    
    switch shader[currentShader]
    {
        case sh_rimlighting:{tex = sprite_get_texture(tex_planets, i) break;}
        case sh_spheremap:{tex = sprite_get_texture(tex_spheremap, i) break;}
        case sh_normalmap:{
            shader_set_uniform_f(lightPos, lightX, lightY, lightZ)
            texture_set_stage(nmSampler, sprite_get_texture(tex_lava_normal, 0));
            tex = sprite_get_texture(tex_lava, 0)
            break;}
        case sh_celshading:{
            shader_set_uniform_f(cslightPos, lightX, lightY, lightZ)
            texture_set_stage(celSample, sprite_get_texture(sample_celshading, 0));
            tex = sprite_get_texture(tex_stone, 0)
            break;}
        case sh_outline:{
            tex = sprite_get_texture(tex_tortoise, 0)
            d3d_model_draw(toonTortoise, 0, 0, 0, tex)
            break;}
        case sh_toon:{
        
            texture_set_stage(toonSample, sprite_get_texture(sample_celshading, 0));
            tex = sprite_get_texture(tex_tortoise, 0)
            d3d_model_draw(toonTortoise, 0, 0, 0, tex)
            break;}
    }
    
    if shader[currentShader] != sh_outline and shader[currentShader] != sh_toon{
    d3d_model_draw(modelTorus, 0, 0, 0, tex)}
    shader_reset()
    
    d3d_transform_set_identity()
}

if shader[currentShader] = sh_celshading
{
    d3d_transform_set_scaling(64, 64, 64)
    d3d_transform_add_translation(lightX, lightY, lightZ)
    d3d_draw_ellipsoid(-1, -1, -1, 1, 1, 1, sprite_get_texture(tex_planets, 0), 1, 1, 20)
    d3d_transform_set_identity()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>currentShader = (currentShader + 1) mod shaders
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
