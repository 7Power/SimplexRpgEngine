<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite6</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>parSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_message(object_get_name(object_index));

  x1 = x-16;
  x2 = x+16;
  y1 = y;
  y2 = y;
  z1 = 64;
  z2 = 0;
  tex = background_get_texture(texture_wall1);
    z = 64;
  myModel = d3d_model_create();
d3d_model_load( myModel, "wall_hor64.gmmod");


ztop = z
zbottom = z-64


z_gravity = 0.1
z_maximum = 8;
z_speed = 0;

d_f = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//depth=min(9999,distance_to_object(oPlayer))

if (instance_number(oCamera) &gt; 0)
{
if (oCamera.d3d)
{
 
 
//  d3d_draw_wall(x1,y1,z1,x2,y2,z2,tex,1,1);
//  d3d_draw_wall(x1,y1,z1+32,x2,y2,z2+32,tex,1,1);
 // d3d_draw_wall(x1,y1,z1-32,x2,y2,z2-32,tex,1,1);
  //      d3d_draw_block(x1,y1,z1,x2,y2,z2,tex,1,1)
  d3d_model_draw( myModel, x, y, z1, tex);
  }
  
  else {draw_self();}
  
  }
   if (mouse_x &gt; x &amp;&amp; mouse_x &lt; x+32 &amp;&amp; mouse_y &gt; y-64 &amp;&amp; mouse_y &lt; y)
   {
    draw_set_alpha(1)
   }
   else
   {
  draw_set_alpha(0.1)
  }
            
  

      draw_set_alpha(1);
 if (instance_number(oPlayer) &gt; 0)
    {
     d3d_draw_line(oPlayer.x,oPlayer.y,0,x,y,32);
    }
 
if (place_empty(x,y))
   {
   if (z_speed &lt; z_maximum)
      {
       z_speed += z_gravity;
      }
    z2-= z_speed;
   // show_message("");
   }   
   
   if (d_f &lt; direction) {d_f += 2;}
   if (d_f &gt; direction) {d_f -= 2;}
d3d_transform_set_rotation_z(d_f)
d3d_transform_add_rotation_x(z_speed*5)

//d3d_transform_set_scaling(3,3,3);
d3d_transform_add_translation(x,y,z2)

     d3d_model_draw( myModel, 0, 0, 0, tex);
 d3d_transform_set_identity();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
