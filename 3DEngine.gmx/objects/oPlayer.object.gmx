<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite5</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oPlayerCamera</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cam variables
  myModel = d3d_model_create();
d3d_model_load( myModel, "m40.gmmod");

event_inherited();
dir_look = 0;
z           = 0
zheight     = 16
pitch = 0;

ztop        = z + zheight
zbottom     = z

zdelta      = 0.8*zheight
bobstep     = 0

direction   = 0
ztilt       = 0

mouse       = true
mwsx        = window_mouse_get_x()
mwsy        = window_mouse_get_y()
mwspx       = mwsx
mwspy       = mwsy
mwsdelx     = 0
mwsdely     = 0


get_keys()
onground        = true
canjump         = true
canpunch        = true

xspeed          = 0
yspeed          = 0
zspeed          = 0

zgravity        = 0.1

movespeedmax    = 3
movespeedmaxw   = 3;  //Walking
movespeedmaxr   = 5;  //Running
jumpspeed       = 3
terminalvelocity= 8
accel           = 0.4

controll   = 1;

rezonate = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord("B")))
   {
    controll = !controll;
   }

if (controll)
{
get_keys()
}


//Mouse Look Code

dir_look -=(display_mouse_get_x()-display_get_width()/2)/4
pitch += (display_mouse_get_y()-display_get_height()/2)/4

look = degtorad(-pitch)/2+.5
if look&gt;.5 then{ look = .5}
   if pitch&lt;-89
 {pitch=-89};
 if pitch&gt;89
 {pitch=89};
 
if dir_look&gt;360 {
dir_look = 0
}

if dir_look&lt;0 {
dir_look = 360
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (mouse_check_button_pressed(mb_left))
{
repeat(10)
{
instance_create(x,y,oBullet);
}
}
image_angle = direction;

if (keyboard_check_pressed(vk_escape)) {game_end();}

if(mouse){
    direction+=((window_get_width() div 2 - window_mouse_get_x())/3)*MOUSESENSITIVITY
    ztilt=median(-90,90, ztilt - MOUSESENSITIVITY*0.3*((window_get_height() div 2 - window_mouse_get_y())))
    window_mouse_set(window_get_width() div 2,window_get_height() div 2)
}

xspeed *= 0.92
yspeed *= 0.92

if(k_u){
    xspeed = median(-movespeedmax,movespeedmax,xspeed + lengthdir_x(accel,direction))
    yspeed = median(-movespeedmax,movespeedmax,yspeed + lengthdir_y(accel,direction))
}
if(k_d){
    xspeed = median(-movespeedmax,movespeedmax,xspeed - lengthdir_x(accel,direction))
    yspeed = median(-movespeedmax,movespeedmax,yspeed - lengthdir_y(accel,direction))
}
if(k_l){
    xspeed = median(-movespeedmax,movespeedmax,xspeed + lengthdir_x(accel,direction + 90))
    yspeed = median(-movespeedmax,movespeedmax,yspeed + lengthdir_y(accel,direction + 90))
}
if(k_r){
    xspeed = median(-movespeedmax,movespeedmax,xspeed + lengthdir_x(accel,direction - 90))
    yspeed = median(-movespeedmax,movespeedmax,yspeed + lengthdir_y(accel,direction - 90))
}
if(k_shift){
    movespeedmax=movespeedmaxr;
}
else {
    movespeedmax=movespeedmaxw;
}

if(xspeed != 0){
    touch = scrD3dCheckCollision(x + xspeed,y,zbottom,ztop)
    if(!touch){
        x += xspeed
    }
    else if(abs(zbottom - touch.ztop) &lt; BIGGESTHURDLEWALK){
        z       = touch.ztop
        zbottom = z
        ztop    = z + zheight 
        x      += xspeed
    }
    else{
        x = xprevious
        xspeed = 0
    }
}
if(yspeed != 0){
    touch = scrD3dCheckCollision(x,y + yspeed,zbottom,ztop)
    if(!touch){
        y += yspeed
    }
    else if(abs(zbottom - touch.ztop) &lt; BIGGESTHURDLEWALK){
        z       = touch.ztop
        zbottom = z
        ztop    = z + zheight 
        y      += yspeed
    }
    else{
        y = yprevious
        yspeed = 0
    }
}
if(scrD3dCheckCollision(x,y,zbottom - 1 + zspeed,ztop - 1 + zspeed))
{

rezonate = 0;
    if(zspeed &lt; 0){
        while(!scrD3dCheckCollision(x,y,zbottom-1,ztop-1)){
            z -= 1
            zbottom = z
            ztop    = z + zheight 
        }
        if(zspeed == -terminalvelocity){
         //  sound_play(snd_landing)
        }
        if(!(k_u||k_l||k_r||k_d)){
            xspeed = 0
            yspeed = 0
        }
    }
    zspeed = 0
    if(k_a){
        if(canjump){
           rezonate = 1;
            //sound_play(snd_jump)
            zspeed = jumpspeed
            canjump = false
        }
    }
    if(xspeed &lt;&gt; 0 || yspeed &lt;&gt; 0){
        bobstep += 4*(xspeed + yspeed) 
        zdelta = zheight*0.8 + lengthdir_y(2,bobstep)
    }
}
else{
    z += zspeed
    zspeed = max(-terminalvelocity,zspeed - zgravity)
    zdelta = zheight*0.8 - 0.25*zspeed
}

if(!k_a){
    canjump = true
    if(zspeed &gt; 3){
        zspeed = 3
    }
}


ztop        = z + zheight
zbottom     = z
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();
//tex_id = background_get_texture(tex_sky);
//d3d_draw_ellipsoid(-1000,-1000,-1000,room_width+500,room_height+500,1000,tex_id,1,1,24);
z_add = pitch;
//z_add=-oPlayer.pitch

//d3d_transform_add_rotation_y(-z_add);
d3d_transform_add_rotation_z(direction);
d3d_transform_add_translation(x,y,2)

//d3d_transform_set_rotation_z(direction)
//d3d_transform_add_rotation_x(z_speed*5)
//d3d_transform_add_rotation_y(-z_add);

//d3d_transform_set_scaling(3,3,3);
//d3d_transform_add_translation(x,y,8)

     //d3d_model_draw( myModel,-10-z_add/15,-8-(z_add/50),0, -1);
       d3d_model_draw( myModel, -10, 0, 0, -1);

 d3d_transform_set_identity();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
