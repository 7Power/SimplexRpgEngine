<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite27</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mask32</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(a = 0; a &lt; 100; a++)
{
noiseP[a] = 0;
}
    surf = surface_create_clear(32,32,c_white,1);
    tex = surface_get_texture(surf);

    zWall = 24*(global.iz-1)/64;
    xScale = 0.45+0.5*abs(noise(x/100,y/100,current_time/100));
    yScale = xScale;
    zScale = xScale;

    speed = xScale*(0.3);
    rot = xScale*(1-random(2));
    direction = random(360);


//    if (not variable_global_exists("modelSpider")) {
        global.modelSpider = d3d_model_create_spider();
  //  }
    model = global.modelSpider;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    surface_free(surf);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if (visible) {
        l = point_distance(0,0,16*xScale,16*xScale);
        u0 = (x+lengthdir_x(l,direction+45))/objectBackground.w;
        v0 = (y+lengthdir_y(l,direction+45))/objectBackground.h;
        u1 = (x+lengthdir_x(l,direction+135))/objectBackground.w;
        v1 = (y+lengthdir_y(l,direction+135))/objectBackground.h;
        u2 = (x+lengthdir_x(l,direction+225))/objectBackground.w;
        v2 = (y+lengthdir_y(l,direction+225))/objectBackground.h;
        u3 = (x+lengthdir_x(l,direction+315))/objectBackground.w;
        v3 = (y+lengthdir_y(l,direction+315))/objectBackground.h;
        
        surface_set_target(surf);
        draw_set_color(c_white);
        draw_primitive_begin_texture(pr_trianglefan,surface_get_texture(objectBackground.surfaceLightCache));
        draw_vertex_texture(0,0,u1,v1);
        draw_vertex_texture(32,0,u0,v0);
        draw_vertex_texture(32,32,u3,v3);
        draw_vertex_texture(0,32,u2,v2);
        draw_primitive_end();
        surface_reset_target();
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    depth = point_distance(x,y,objectPlayer.x,objectPlayer.y);
    direction += rot;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objectWall">
      <action>
        <libid>1</libid>
        <id>115</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_bounce</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    rot = xScale*(1-random(2));
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    d3d_transform_stack_push();
    d3d_transform_add_scaling(xScale,yScale,zScale);
    d3d_transform_add_rotation_z(direction);
    d3d_transform_add_translation(x,y,0);
    camera_tilt(); 
    d3d_set_culling(true);
    draw_set_color(c_white);
    d3d_model_draw(model,0,0,0,surface_get_texture(surf));
    draw_set_blend_mode_ext(bm_zero,bm_src_color);
    d3d_model_draw(model,0,0,0,sprite_get_texture(sprite_index,0));
    draw_set_blend_mode(bm_normal);
    d3d_transform_stack_pop();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
